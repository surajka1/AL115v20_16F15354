CCS PCM C Compiler, Version 5.074, 43599               26-Jun-18 11:12

               Filename:   E:\programs\AL115v20_16F15354\AL115v20.lst

               ROM used:   3774 words (92%)
                           Largest free fragment is 159
               RAM used:   146 (29%) at main() level
                           229 (45%) worst case
               Stack used: 4 locations (3 in main + 1 for interrupts)
               Stack size: 16

*
0000:  MOVLP  08
0001:  GOTO   597
0002:  NOP
0004:  CLRF   03
0005:  MOVLP  00
0006:  MOVLB  00
0007:  MOVF   77,W
0008:  MOVWF  20
0009:  MOVF   78,W
000A:  MOVWF  21
000B:  MOVF   79,W
000C:  MOVWF  22
000D:  MOVF   7A,W
000E:  MOVWF  23
000F:  MOVLW  07
0010:  MOVWF  05
0011:  MOVLW  16
0012:  MOVWF  04
0013:  BTFSS  00.5
0014:  GOTO   01B
0015:  MOVLW  07
0016:  MOVWF  05
0017:  MOVLW  0C
0018:  MOVWF  04
0019:  BTFSC  00.5
001A:  GOTO   048
001B:  MOVLW  07
001C:  MOVWF  05
001D:  MOVLW  17
001E:  MOVWF  04
001F:  BTFSS  00.7
0020:  GOTO   027
0021:  MOVLW  07
0022:  MOVWF  05
0023:  MOVLW  0D
0024:  MOVWF  04
0025:  BTFSC  00.7
0026:  GOTO   04A
0027:  MOVLW  07
0028:  MOVWF  05
0029:  MOVLW  19
002A:  MOVWF  04
002B:  BTFSS  00.0
002C:  GOTO   033
002D:  MOVLW  07
002E:  MOVWF  05
002F:  MOVLW  0F
0030:  MOVWF  04
0031:  BTFSC  00.0
0032:  GOTO   04C
0033:  MOVLW  07
0034:  MOVWF  05
0035:  MOVLW  1A
0036:  MOVWF  04
0037:  BTFSS  00.1
0038:  GOTO   03F
0039:  MOVLW  07
003A:  MOVWF  05
003B:  MOVLW  10
003C:  MOVWF  04
003D:  BTFSC  00.1
003E:  GOTO   04E
003F:  MOVF   20,W
0040:  MOVWF  77
0041:  MOVF   21,W
0042:  MOVWF  78
0043:  MOVF   22,W
0044:  MOVWF  79
0045:  MOVF   23,W
0046:  MOVWF  7A
0047:  RETFIE
0048:  MOVLP  00
0049:  GOTO   056
004A:  MOVLP  00
004B:  GOTO   05C
004C:  MOVLP  00
004D:  GOTO   063
004E:  MOVLP  00
004F:  GOTO   050
.................... #case 
....................  
.................... #include <main.h> 
.................... #include <16F15354.h> 
.................... //////////// Standard Header file for the PIC16F15354 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F15354 
*
00EE:  MOVF   0B,W
00EF:  MOVLB  02
00F0:  MOVWF  54
00F1:  BCF    0B.7
00F2:  MOVLW  E0
00F3:  MOVLB  10
00F4:  ANDWF  1A,F
00F5:  BSF    1E.7
00F6:  BSF    1E.2
00F7:  BSF    1E.5
00F8:  MOVLW  20
00F9:  MOVWF  05
00FA:  MOVLW  94
00FB:  MOVWF  04
00FC:  MOVLW  20
00FD:  MOVWF  77
00FE:  BSF    1E.0
00FF:  NOP
0100:  NOP
0101:  MOVF   1A,W
0102:  SUBWF  7A,W
0103:  BTFSC  03.2
0104:  GOTO   10C
0105:  MOVF   1C,W
0106:  MOVWF  00
0107:  INCF   04,F
0108:  MOVF   1D,W
0109:  MOVWF  00
010A:  INCF   04,F
010B:  GOTO   112
010C:  MOVF   78,W
010D:  MOVWF  00
010E:  INCF   04,F
010F:  MOVF   79,W
0110:  MOVWF  00
0111:  INCF   04,F
0112:  INCF   1A,F
0113:  DECFSZ 77,F
0114:  GOTO   0FE
0115:  DECF   1A,F
0116:  MOVLW  E0
0117:  ANDWF  1A,F
0118:  BSF    1E.4
0119:  MOVLW  55
011A:  MOVWF  1F
011B:  MOVLW  AA
011C:  MOVWF  1F
011D:  BSF    1E.1
011E:  NOP
011F:  NOP
0120:  BCF    1E.4
0121:  MOVLW  20
0122:  MOVWF  05
0123:  MOVLW  94
0124:  MOVWF  04
0125:  MOVLW  20
0126:  MOVWF  77
0127:  MOVF   00,W
0128:  MOVWF  1C
0129:  INCF   04,F
012A:  MOVF   00,W
012B:  MOVWF  1D
012C:  INCF   04,F
012D:  MOVLW  55
012E:  MOVWF  1F
012F:  MOVLW  AA
0130:  MOVWF  1F
0131:  BSF    1E.1
0132:  NOP
0133:  NOP
0134:  INCF   1A,F
0135:  DECFSZ 77,F
0136:  GOTO   127
0137:  DECF   1A,F
0138:  BCF    1E.5
0139:  MOVLW  55
013A:  MOVWF  1F
013B:  MOVLW  AA
013C:  MOVWF  1F
013D:  BSF    1E.1
013E:  NOP
013F:  NOP
0140:  BCF    1E.2
0141:  MOVLB  02
0142:  MOVF   54,W
0143:  IORWF  0B,F
*
020E:  MOVLW  8E
020F:  MOVWF  77
0210:  MOVLB  01
0211:  MOVF   69,W
0212:  MOVWF  78
0213:  MOVF   68,W
0214:  MOVWF  79
0215:  CLRF   7A
0216:  MOVF   78,F
0217:  BTFSS  03.2
0218:  GOTO   223
0219:  MOVF   79,W
021A:  MOVWF  78
021B:  CLRF   79
021C:  MOVLW  08
021D:  SUBWF  77,F
021E:  MOVF   78,F
021F:  BTFSS  03.2
0220:  GOTO   223
0221:  CLRF   77
0222:  GOTO   22B
0223:  BCF    03.0
0224:  BTFSC  78.7
0225:  GOTO   22A
0226:  RLF    79,F
0227:  RLF    78,F
0228:  DECF   77,F
0229:  GOTO   223
022A:  BCF    78.7
022B:  MOVLB  00
022C:  RETURN
022D:  MOVLB  01
022E:  MOVF   68,W
022F:  BTFSC  03.2
0230:  GOTO   320
0231:  MOVLB  02
0232:  MOVWF  26
0233:  MOVLB  01
0234:  MOVF   6C,W
0235:  BTFSC  03.2
0236:  GOTO   320
0237:  MOVLB  02
0238:  SUBWF  26,F
0239:  BTFSS  03.0
023A:  GOTO   242
023B:  MOVLW  7F
023C:  ADDWF  26,F
023D:  BTFSS  03.0
023E:  GOTO   241
023F:  MOVLB  01
0240:  GOTO   320
0241:  GOTO   24C
0242:  MOVLW  81
0243:  SUBWF  26,F
0244:  BTFSC  03.0
0245:  GOTO   248
0246:  MOVLB  01
0247:  GOTO   320
0248:  BTFSS  03.2
0249:  GOTO   24C
024A:  MOVLB  01
024B:  GOTO   320
024C:  MOVF   26,W
024D:  MOVWF  77
024E:  CLRF   78
024F:  CLRF   79
0250:  CLRF   7A
0251:  CLRF   25
0252:  MOVLB  01
0253:  MOVF   69,W
0254:  MOVLB  02
0255:  MOVWF  24
0256:  BSF    24.7
0257:  MOVLB  01
0258:  MOVF   6A,W
0259:  MOVLB  02
025A:  MOVWF  23
025B:  MOVLB  01
025C:  MOVF   6B,W
025D:  MOVLB  02
025E:  MOVWF  22
025F:  MOVLW  19
0260:  MOVWF  26
0261:  MOVLB  01
0262:  MOVF   6F,W
0263:  MOVLB  02
0264:  SUBWF  22,F
0265:  BTFSC  03.0
0266:  GOTO   279
0267:  MOVLW  01
0268:  SUBWF  23,F
0269:  BTFSC  03.0
026A:  GOTO   279
026B:  SUBWF  24,F
026C:  BTFSC  03.0
026D:  GOTO   279
026E:  SUBWF  25,F
026F:  BTFSC  03.0
0270:  GOTO   279
0271:  INCF   25,F
0272:  INCF   24,F
0273:  INCF   23,F
0274:  MOVLB  01
0275:  MOVF   6F,W
0276:  MOVLB  02
0277:  ADDWF  22,F
0278:  GOTO   2B7
0279:  MOVLB  01
027A:  MOVF   6E,W
027B:  MOVLB  02
027C:  SUBWF  23,F
027D:  BTFSC  03.0
027E:  GOTO   29A
027F:  MOVLW  01
0280:  SUBWF  24,F
0281:  BTFSC  03.0
0282:  GOTO   29A
0283:  SUBWF  25,F
0284:  BTFSC  03.0
0285:  GOTO   29A
0286:  INCF   25,F
0287:  INCF   24,F
0288:  MOVLB  01
0289:  MOVF   6E,W
028A:  MOVLB  02
028B:  ADDWF  23,F
028C:  MOVLB  01
028D:  MOVF   6F,W
028E:  MOVLB  02
028F:  ADDWF  22,F
0290:  BTFSS  03.0
0291:  GOTO   2B7
0292:  INCF   23,F
0293:  BTFSS  03.2
0294:  GOTO   2B7
0295:  INCF   24,F
0296:  BTFSS  03.2
0297:  GOTO   2B7
0298:  INCF   25,F
0299:  GOTO   2B7
029A:  MOVLB  01
029B:  MOVF   6D,W
029C:  IORLW  80
029D:  MOVLB  02
029E:  SUBWF  24,F
029F:  BTFSC  03.0
02A0:  GOTO   2B6
02A1:  MOVLW  01
02A2:  SUBWF  25,F
02A3:  BTFSC  03.0
02A4:  GOTO   2B6
02A5:  INCF   25,F
02A6:  MOVLB  01
02A7:  MOVF   6D,W
02A8:  IORLW  80
02A9:  MOVLB  02
02AA:  ADDWF  24,F
02AB:  MOVLB  01
02AC:  MOVF   6E,W
02AD:  MOVLB  02
02AE:  ADDWF  23,F
02AF:  BTFSS  03.0
02B0:  GOTO   28C
02B1:  INCF   24,F
02B2:  BTFSS  03.2
02B3:  GOTO   28C
02B4:  INCF   25,F
02B5:  GOTO   28C
02B6:  BSF    7A.0
02B7:  DECFSZ 26,F
02B8:  GOTO   2BA
02B9:  GOTO   2C5
02BA:  BCF    03.0
02BB:  RLF    22,F
02BC:  RLF    23,F
02BD:  RLF    24,F
02BE:  RLF    25,F
02BF:  BCF    03.0
02C0:  RLF    7A,F
02C1:  RLF    79,F
02C2:  RLF    78,F
02C3:  RLF    27,F
02C4:  GOTO   261
02C5:  BTFSS  27.0
02C6:  GOTO   2CD
02C7:  BCF    03.0
02C8:  RRF    78,F
02C9:  RRF    79,F
02CA:  RRF    7A,F
02CB:  RRF    27,F
02CC:  GOTO   2D1
02CD:  DECFSZ 77,F
02CE:  GOTO   2D1
02CF:  MOVLB  01
02D0:  GOTO   320
02D1:  BTFSC  27.7
02D2:  GOTO   300
02D3:  BCF    03.0
02D4:  RLF    22,F
02D5:  RLF    23,F
02D6:  RLF    24,F
02D7:  RLF    25,F
02D8:  MOVLB  01
02D9:  MOVF   6F,W
02DA:  MOVLB  02
02DB:  SUBWF  22,F
02DC:  BTFSC  03.0
02DD:  GOTO   2E8
02DE:  MOVLW  01
02DF:  SUBWF  23,F
02E0:  BTFSC  03.0
02E1:  GOTO   2E8
02E2:  SUBWF  24,F
02E3:  BTFSC  03.0
02E4:  GOTO   2E8
02E5:  SUBWF  25,F
02E6:  BTFSS  03.0
02E7:  GOTO   311
02E8:  MOVLB  01
02E9:  MOVF   6E,W
02EA:  MOVLB  02
02EB:  SUBWF  23,F
02EC:  BTFSC  03.0
02ED:  GOTO   2F5
02EE:  MOVLW  01
02EF:  SUBWF  24,F
02F0:  BTFSC  03.0
02F1:  GOTO   2F5
02F2:  SUBWF  25,F
02F3:  BTFSS  03.0
02F4:  GOTO   311
02F5:  MOVLB  01
02F6:  MOVF   6D,W
02F7:  IORLW  80
02F8:  MOVLB  02
02F9:  SUBWF  24,F
02FA:  BTFSC  03.0
02FB:  GOTO   300
02FC:  MOVLW  01
02FD:  SUBWF  25,F
02FE:  BTFSS  03.0
02FF:  GOTO   311
0300:  INCF   7A,F
0301:  BTFSS  03.2
0302:  GOTO   311
0303:  INCF   79,F
0304:  BTFSS  03.2
0305:  GOTO   311
0306:  INCF   78,F
0307:  BTFSS  03.2
0308:  GOTO   311
0309:  INCF   77,F
030A:  BTFSS  03.2
030B:  GOTO   30E
030C:  MOVLB  01
030D:  GOTO   320
030E:  RRF    78,F
030F:  RRF    79,F
0310:  RRF    7A,F
0311:  MOVLB  01
0312:  MOVF   69,W
0313:  MOVLB  02
0314:  MOVWF  26
0315:  MOVLB  01
0316:  MOVF   6D,W
0317:  MOVLB  02
0318:  XORWF  26,F
0319:  BTFSS  26.7
031A:  GOTO   31D
031B:  BSF    78.7
031C:  GOTO   325
031D:  BCF    78.7
031E:  GOTO   325
031F:  MOVLB  01
0320:  CLRF   77
0321:  CLRF   78
0322:  CLRF   79
0323:  CLRF   7A
0324:  MOVLB  02
0325:  MOVLB  00
0326:  RETURN
*
04BE:  CLRF   78
04BF:  CLRF   79
04C0:  CLRF   77
04C1:  CLRF   7A
04C2:  MOVF   64,W
04C3:  BTFSS  03.2
04C4:  GOTO   4C8
04C5:  MOVF   63,W
04C6:  BTFSC  03.2
04C7:  GOTO   4E2
04C8:  MOVLW  10
04C9:  MOVWF  65
04CA:  BCF    03.0
04CB:  RLF    61,F
04CC:  RLF    62,F
04CD:  RLF    77,F
04CE:  RLF    7A,F
04CF:  MOVF   64,W
04D0:  SUBWF  7A,W
04D1:  BTFSS  03.2
04D2:  GOTO   4D5
04D3:  MOVF   63,W
04D4:  SUBWF  77,W
04D5:  BTFSS  03.0
04D6:  GOTO   4DE
04D7:  MOVF   63,W
04D8:  SUBWF  77,F
04D9:  BTFSS  03.0
04DA:  DECF   7A,F
04DB:  MOVF   64,W
04DC:  SUBWF  7A,F
04DD:  BSF    03.0
04DE:  RLF    78,F
04DF:  RLF    79,F
04E0:  DECFSZ 65,F
04E1:  GOTO   4CA
*
04EC:  MOVLB  01
04ED:  MOVF   64,W
04EE:  BTFSC  03.2
04EF:  GOTO   581
04F0:  MOVLB  02
04F1:  MOVWF  20
04F2:  MOVLB  01
04F3:  MOVF   68,W
04F4:  BTFSC  03.2
04F5:  GOTO   581
04F6:  MOVLB  02
04F7:  ADDWF  20,F
04F8:  BTFSC  03.0
04F9:  GOTO   505
04FA:  MOVLW  7F
04FB:  SUBWF  20,F
04FC:  BTFSC  03.0
04FD:  GOTO   500
04FE:  MOVLB  01
04FF:  GOTO   581
0500:  BTFSS  03.2
0501:  GOTO   504
0502:  MOVLB  01
0503:  GOTO   581
0504:  GOTO   50B
0505:  MOVLW  81
0506:  ADDWF  20,F
0507:  BTFSS  03.0
0508:  GOTO   50B
0509:  MOVLB  01
050A:  GOTO   581
050B:  MOVF   20,W
050C:  MOVWF  77
050D:  CLRF   78
050E:  CLRF   79
050F:  CLRF   7A
0510:  MOVLB  01
0511:  MOVF   65,W
0512:  MOVLB  02
0513:  MOVWF  24
0514:  BSF    24.7
0515:  MOVLB  01
0516:  MOVF   66,W
0517:  MOVLB  02
0518:  MOVWF  23
0519:  MOVLB  01
051A:  MOVF   67,W
051B:  MOVLB  02
051C:  MOVWF  22
051D:  MOVLW  18
051E:  MOVWF  20
051F:  CLRF   21
0520:  BTFSS  22.0
0521:  GOTO   545
0522:  MOVLB  01
0523:  MOVF   6B,W
0524:  ADDWF  7A,F
0525:  BTFSS  03.0
0526:  GOTO   530
0527:  INCF   79,F
0528:  BTFSS  03.2
0529:  GOTO   530
052A:  INCF   78,F
052B:  BTFSS  03.2
052C:  GOTO   530
052D:  MOVLB  02
052E:  BSF    21.7
052F:  MOVLB  01
0530:  MOVF   6A,W
0531:  ADDWF  79,F
0532:  BTFSS  03.0
0533:  GOTO   53A
0534:  INCF   78,F
0535:  BTFSS  03.2
0536:  GOTO   53A
0537:  MOVLB  02
0538:  BSF    21.7
0539:  MOVLB  01
053A:  MOVF   69,W
053B:  MOVWF  66
053C:  BSF    66.7
053D:  MOVF   66,W
053E:  ADDWF  78,F
053F:  BTFSS  03.0
0540:  GOTO   544
0541:  MOVLB  02
0542:  BSF    21.7
0543:  MOVLB  01
0544:  MOVLB  02
0545:  RLF    21,F
0546:  RRF    78,F
0547:  RRF    79,F
0548:  RRF    7A,F
0549:  RRF    24,F
054A:  RRF    23,F
054B:  RRF    22,F
054C:  BCF    03.0
054D:  DECFSZ 20,F
054E:  GOTO   51F
054F:  MOVLW  01
0550:  ADDWF  77,F
0551:  BTFSS  03.0
0552:  GOTO   555
0553:  MOVLB  01
0554:  GOTO   581
0555:  BTFSC  78.7
0556:  GOTO   55F
0557:  RLF    24,F
0558:  RLF    7A,F
0559:  RLF    79,F
055A:  RLF    78,F
055B:  DECFSZ 77,F
055C:  GOTO   55F
055D:  MOVLB  01
055E:  GOTO   581
055F:  BTFSS  24.7
0560:  GOTO   572
0561:  INCF   7A,F
0562:  BTFSS  03.2
0563:  GOTO   572
0564:  INCF   79,F
0565:  BTFSS  03.2
0566:  GOTO   572
0567:  INCF   78,F
0568:  BTFSS  03.2
0569:  GOTO   572
056A:  RRF    78,F
056B:  RRF    79,F
056C:  RRF    7A,F
056D:  INCF   77,F
056E:  BTFSS  03.2
056F:  GOTO   572
0570:  MOVLB  01
0571:  GOTO   581
0572:  MOVLB  01
0573:  MOVF   65,W
0574:  MOVLB  02
0575:  MOVWF  21
0576:  MOVLB  01
0577:  MOVF   69,W
0578:  MOVLB  02
0579:  XORWF  21,F
057A:  BTFSS  21.7
057B:  GOTO   57E
057C:  BSF    78.7
057D:  GOTO   586
057E:  BCF    78.7
057F:  GOTO   586
0580:  MOVLB  01
0581:  CLRF   77
0582:  CLRF   78
0583:  CLRF   79
0584:  CLRF   7A
0585:  MOVLB  02
0586:  MOVLB  00
0587:  RETURN
0588:  MOVLW  80
0589:  BTFSS  03.1
058A:  GOTO   58E
058B:  MOVLB  01
058C:  XORWF  63,F
058D:  MOVLB  00
058E:  MOVLB  01
058F:  CLRF   6A
0590:  CLRF   6B
0591:  MOVF   5F,W
0592:  MOVWF  69
0593:  MOVF   63,W
0594:  XORWF  69,F
0595:  MOVF   5E,W
0596:  BTFSC  03.2
0597:  GOTO   67F
0598:  MOVWF  68
0599:  MOVWF  77
059A:  MOVF   62,W
059B:  BTFSC  03.2
059C:  GOTO   688
059D:  SUBWF  68,F
059E:  BTFSC  03.2
059F:  GOTO   623
05A0:  BTFSS  03.0
05A1:  GOTO   5E0
05A2:  MOVF   63,W
05A3:  MOVWF  6E
05A4:  BSF    6E.7
05A5:  MOVF   64,W
05A6:  MOVWF  6D
05A7:  MOVF   65,W
05A8:  MOVWF  6C
05A9:  CLRF   6B
05AA:  BCF    03.0
05AB:  RRF    6E,F
05AC:  RRF    6D,F
05AD:  RRF    6C,F
05AE:  RRF    6B,F
05AF:  DECFSZ 68,F
05B0:  GOTO   5A9
05B1:  BTFSS  69.7
05B2:  GOTO   5B6
05B3:  BSF    6A.0
05B4:  GOTO   69C
05B5:  BCF    6A.0
05B6:  BCF    68.0
05B7:  BSF    6A.4
05B8:  MOVLW  20
05B9:  MOVWF  05
05BA:  MOVLW  91
05BB:  MOVWF  04
05BC:  GOTO   6B1
05BD:  BCF    6A.4
05BE:  BTFSC  69.7
05BF:  GOTO   5CA
05C0:  BTFSS  68.0
05C1:  GOTO   5D5
05C2:  RRF    6E,F
05C3:  RRF    6D,F
05C4:  RRF    6C,F
05C5:  RRF    6B,F
05C6:  INCF   77,F
05C7:  BTFSC  03.2
05C8:  GOTO   697
05C9:  GOTO   5D5
05CA:  BTFSC  6E.7
05CB:  GOTO   5D8
05CC:  BCF    03.0
05CD:  RLF    6B,F
05CE:  RLF    6C,F
05CF:  RLF    6D,F
05D0:  RLF    6E,F
05D1:  DECF   77,F
05D2:  BTFSC  03.2
05D3:  GOTO   697
05D4:  GOTO   5CA
05D5:  BSF    6A.6
05D6:  GOTO   644
05D7:  BCF    6A.6
05D8:  MOVF   5F,W
05D9:  MOVWF  69
05DA:  BTFSS  69.7
05DB:  GOTO   5DE
05DC:  BSF    6E.7
05DD:  GOTO   690
05DE:  BCF    6E.7
05DF:  GOTO   690
05E0:  MOVF   62,W
05E1:  MOVWF  68
05E2:  MOVWF  77
05E3:  MOVF   5E,W
05E4:  SUBWF  68,F
05E5:  MOVF   5F,W
05E6:  MOVWF  6E
05E7:  BSF    6E.7
05E8:  MOVF   60,W
05E9:  MOVWF  6D
05EA:  MOVF   61,W
05EB:  MOVWF  6C
05EC:  CLRF   6B
05ED:  BCF    03.0
05EE:  RRF    6E,F
05EF:  RRF    6D,F
05F0:  RRF    6C,F
05F1:  RRF    6B,F
05F2:  DECFSZ 68,F
05F3:  GOTO   5EC
05F4:  BTFSS  69.7
05F5:  GOTO   5F9
05F6:  BSF    6A.1
05F7:  GOTO   69C
05F8:  BCF    6A.1
05F9:  BCF    68.0
05FA:  BSF    6A.5
05FB:  MOVLW  20
05FC:  MOVWF  05
05FD:  MOVLW  95
05FE:  MOVWF  04
05FF:  GOTO   6B1
0600:  BCF    6A.5
0601:  BTFSC  69.7
0602:  GOTO   60D
0603:  BTFSS  68.0
0604:  GOTO   618
0605:  RRF    6E,F
0606:  RRF    6D,F
0607:  RRF    6C,F
0608:  RRF    6B,F
0609:  INCF   77,F
060A:  BTFSC  03.2
060B:  GOTO   697
060C:  GOTO   618
060D:  BTFSC  6E.7
060E:  GOTO   61B
060F:  BCF    03.0
0610:  RLF    6B,F
0611:  RLF    6C,F
0612:  RLF    6D,F
0613:  RLF    6E,F
0614:  DECF   77,F
0615:  BTFSC  03.2
0616:  GOTO   697
0617:  GOTO   60D
0618:  BSF    6A.7
0619:  GOTO   644
061A:  BCF    6A.7
061B:  MOVF   63,W
061C:  MOVWF  69
061D:  BTFSS  69.7
061E:  GOTO   621
061F:  BSF    6E.7
0620:  GOTO   690
0621:  BCF    6E.7
0622:  GOTO   690
0623:  MOVF   63,W
0624:  MOVWF  6E
0625:  BSF    6E.7
0626:  MOVF   64,W
0627:  MOVWF  6D
0628:  MOVF   65,W
0629:  MOVWF  6C
062A:  BTFSS  69.7
062B:  GOTO   630
062C:  BCF    6E.7
062D:  BSF    6A.2
062E:  GOTO   69C
062F:  BCF    6A.2
0630:  CLRF   6B
0631:  BCF    68.0
0632:  MOVLW  20
0633:  MOVWF  05
0634:  MOVLW  91
0635:  MOVWF  04
0636:  GOTO   6B1
0637:  BTFSC  69.7
0638:  GOTO   65A
0639:  MOVF   5F,W
063A:  MOVWF  69
063B:  BTFSS  68.0
063C:  GOTO   644
063D:  RRF    6E,F
063E:  RRF    6D,F
063F:  RRF    6C,F
0640:  RRF    6B,F
0641:  INCF   77,F
0642:  BTFSC  03.2
0643:  GOTO   697
0644:  BTFSS  6B.7
0645:  GOTO   655
0646:  INCF   6C,F
0647:  BTFSS  03.2
0648:  GOTO   655
0649:  INCF   6D,F
064A:  BTFSS  03.2
064B:  GOTO   655
064C:  INCF   6E,F
064D:  BTFSS  03.2
064E:  GOTO   655
064F:  RRF    6E,F
0650:  RRF    6D,F
0651:  RRF    6C,F
0652:  INCF   77,F
0653:  BTFSC  03.2
0654:  GOTO   697
0655:  BTFSC  6A.6
0656:  GOTO   5D7
0657:  BTFSC  6A.7
0658:  GOTO   61A
0659:  GOTO   679
065A:  MOVLW  80
065B:  XORWF  6E,F
065C:  BTFSS  6E.7
065D:  GOTO   662
065E:  GOTO   69C
065F:  MOVF   63,W
0660:  MOVWF  69
0661:  GOTO   66F
0662:  MOVF   5F,W
0663:  MOVWF  69
0664:  MOVF   6E,F
0665:  BTFSS  03.2
0666:  GOTO   66F
0667:  MOVF   6D,F
0668:  BTFSS  03.2
0669:  GOTO   66F
066A:  MOVF   6C,F
066B:  BTFSS  03.2
066C:  GOTO   66F
066D:  CLRF   77
066E:  GOTO   690
066F:  BTFSC  6E.7
0670:  GOTO   679
0671:  BCF    03.0
0672:  RLF    6B,F
0673:  RLF    6C,F
0674:  RLF    6D,F
0675:  RLF    6E,F
0676:  DECFSZ 77,F
0677:  GOTO   66F
0678:  GOTO   697
0679:  BTFSS  69.7
067A:  GOTO   67D
067B:  BSF    6E.7
067C:  GOTO   690
067D:  BCF    6E.7
067E:  GOTO   690
067F:  MOVF   62,W
0680:  MOVWF  77
0681:  MOVF   63,W
0682:  MOVWF  6E
0683:  MOVF   64,W
0684:  MOVWF  6D
0685:  MOVF   65,W
0686:  MOVWF  6C
0687:  GOTO   690
0688:  MOVF   5E,W
0689:  MOVWF  77
068A:  MOVF   5F,W
068B:  MOVWF  6E
068C:  MOVF   60,W
068D:  MOVWF  6D
068E:  MOVF   61,W
068F:  MOVWF  6C
0690:  MOVF   6E,W
0691:  MOVWF  78
0692:  MOVF   6D,W
0693:  MOVWF  79
0694:  MOVF   6C,W
0695:  MOVWF  7A
0696:  GOTO   6CD
0697:  CLRF   77
0698:  CLRF   78
0699:  CLRF   79
069A:  CLRF   7A
069B:  GOTO   6CD
069C:  CLRF   6B
069D:  COMF   6C,F
069E:  COMF   6D,F
069F:  COMF   6E,F
06A0:  COMF   6B,F
06A1:  INCF   6B,F
06A2:  BTFSS  03.2
06A3:  GOTO   6AA
06A4:  INCF   6C,F
06A5:  BTFSS  03.2
06A6:  GOTO   6AA
06A7:  INCF   6D,F
06A8:  BTFSC  03.2
06A9:  INCF   6E,F
06AA:  BTFSC  6A.0
06AB:  GOTO   5B5
06AC:  BTFSC  6A.1
06AD:  GOTO   5F8
06AE:  BTFSC  6A.2
06AF:  GOTO   62F
06B0:  GOTO   65F
06B1:  MOVF   00,W
06B2:  ADDWF  6C,F
06B3:  BTFSS  03.0
06B4:  GOTO   6BB
06B5:  INCF   6D,F
06B6:  BTFSS  03.2
06B7:  GOTO   6BB
06B8:  INCF   6E,F
06B9:  BTFSC  03.2
06BA:  BSF    68.0
06BB:  MOVIW  [--FSR0],W
06BC:  ADDWF  6D,F
06BD:  BTFSS  03.0
06BE:  GOTO   6C2
06BF:  INCF   6E,F
06C0:  BTFSC  03.2
06C1:  BSF    68.0
06C2:  MOVIW  [--FSR0],W
06C3:  BTFSS  00.7
06C4:  XORLW  80
06C5:  ADDWF  6E,F
06C6:  BTFSC  03.0
06C7:  BSF    68.0
06C8:  BTFSC  6A.4
06C9:  GOTO   5BD
06CA:  BTFSC  6A.5
06CB:  GOTO   600
06CC:  GOTO   637
06CD:  MOVLB  00
06CE:  RETURN
06CF:  MOVLW  8E
06D0:  MOVWF  77
06D1:  MOVLB  01
06D2:  MOVF   60,W
06D3:  SUBWF  77,F
06D4:  MOVF   61,W
06D5:  MOVWF  79
06D6:  MOVF   62,W
06D7:  MOVWF  78
06D8:  BSF    79.7
06D9:  MOVF   77,F
06DA:  BTFSC  03.2
06DB:  GOTO   6E7
06DC:  BCF    03.0
06DD:  MOVF   79,F
06DE:  BTFSS  03.2
06DF:  GOTO   6E3
06E0:  MOVF   78,F
06E1:  BTFSC  03.2
06E2:  GOTO   6E7
06E3:  RRF    79,F
06E4:  RRF    78,F
06E5:  DECFSZ 77,F
06E6:  GOTO   6DC
06E7:  BTFSS  61.7
06E8:  GOTO   6EE
06E9:  COMF   78,F
06EA:  COMF   79,F
06EB:  INCF   78,F
06EC:  BTFSC  03.2
06ED:  INCF   79,F
06EE:  MOVLB  00
06EF:  RETURN
*
0764:  BTFSC  03.1
0765:  GOTO   76A
0766:  MOVLW  20
0767:  MOVWF  05
0768:  MOVLW  A0
0769:  MOVWF  04
076A:  CLRF   77
076B:  CLRF   78
076C:  CLRF   79
076D:  CLRF   7A
076E:  MOVLB  02
076F:  CLRF   20
0770:  CLRF   21
0771:  CLRF   22
0772:  CLRF   23
0773:  MOVLB  01
0774:  MOVF   6D,W
0775:  IORWF  6C,W
0776:  IORWF  6B,W
0777:  IORWF  6A,W
0778:  BTFSC  03.2
0779:  GOTO   7C6
077A:  MOVLW  20
077B:  MOVLB  02
077C:  MOVWF  24
077D:  BCF    03.0
077E:  MOVLB  01
077F:  RLF    66,F
0780:  RLF    67,F
0781:  RLF    68,F
0782:  RLF    69,F
0783:  MOVLB  02
0784:  RLF    20,F
0785:  RLF    21,F
0786:  RLF    22,F
0787:  RLF    23,F
0788:  MOVLB  01
0789:  MOVF   6D,W
078A:  MOVLB  02
078B:  SUBWF  23,W
078C:  BTFSS  03.2
078D:  GOTO   79E
078E:  MOVLB  01
078F:  MOVF   6C,W
0790:  MOVLB  02
0791:  SUBWF  22,W
0792:  BTFSS  03.2
0793:  GOTO   79E
0794:  MOVLB  01
0795:  MOVF   6B,W
0796:  MOVLB  02
0797:  SUBWF  21,W
0798:  BTFSS  03.2
0799:  GOTO   79E
079A:  MOVLB  01
079B:  MOVF   6A,W
079C:  MOVLB  02
079D:  SUBWF  20,W
079E:  BTFSS  03.0
079F:  GOTO   7BF
07A0:  MOVLB  01
07A1:  MOVF   6A,W
07A2:  MOVLB  02
07A3:  SUBWF  20,F
07A4:  MOVLB  01
07A5:  MOVF   6B,W
07A6:  BTFSS  03.0
07A7:  INCFSZ 6B,W
07A8:  GOTO   7AA
07A9:  GOTO   7AD
07AA:  MOVLB  02
07AB:  SUBWF  21,F
07AC:  MOVLB  01
07AD:  MOVF   6C,W
07AE:  BTFSS  03.0
07AF:  INCFSZ 6C,W
07B0:  GOTO   7B2
07B1:  GOTO   7B5
07B2:  MOVLB  02
07B3:  SUBWF  22,F
07B4:  MOVLB  01
07B5:  MOVF   6D,W
07B6:  BTFSS  03.0
07B7:  INCFSZ 6D,W
07B8:  GOTO   7BA
07B9:  GOTO   7BD
07BA:  MOVLB  02
07BB:  SUBWF  23,F
07BC:  MOVLB  01
07BD:  BSF    03.0
07BE:  MOVLB  02
07BF:  RLF    77,F
07C0:  RLF    78,F
07C1:  RLF    79,F
07C2:  RLF    7A,F
07C3:  DECFSZ 24,F
07C4:  GOTO   77D
07C5:  MOVLB  01
07C6:  MOVLB  02
07C7:  MOVF   20,W
07C8:  MOVWF  00
07C9:  MOVF   21,W
07CA:  MOVWI  W,[FSR0+01]
07CB:  MOVF   22,W
07CC:  MOVWI  W,[FSR0+02]
07CD:  MOVF   23,W
07CE:  MOVWI  W,[FSR0+03]
*
081C:  MOVLW  10
081D:  MOVWF  5E
081E:  CLRF   77
081F:  CLRF   7A
0820:  RRF    5B,F
0821:  RRF    5A,F
0822:  BTFSS  03.0
0823:  GOTO   02A
0824:  MOVF   5C,W
0825:  ADDWF  77,F
0826:  BTFSC  03.0
0827:  INCF   7A,F
0828:  MOVF   5D,W
0829:  ADDWF  7A,F
082A:  RRF    7A,F
082B:  RRF    77,F
082C:  RRF    79,F
082D:  RRF    78,F
082E:  DECFSZ 5E,F
082F:  GOTO   020
....................  
.................... #list 
....................  
.................... #device ADC=10 
....................  
.................... #FUSES WDT                      //Watch Dog Timer 
.................... #FUSES PUT                      //Power Up Timer 
.................... #FUSES PROTECT                  //Code protected from reads 
.................... #FUSES BROWNOUT_SW              //Brownout controlled by configuration bit in special file register 
.................... #FUSES BORV27                   //Brownout reset at 2.5V 
....................  
.................... #use delay(internal=4000000,restart_wdt) 
*
0460:  MOVLW  20
0461:  MOVWF  05
0462:  MOVLW  91
0463:  MOVWF  04
0464:  MOVF   00,W
0465:  BTFSC  03.2
0466:  GOTO   478
0467:  MOVLW  01
0468:  MOVWF  78
0469:  MOVLW  BF
046A:  MOVWF  77
046B:  CLRWDT
046C:  DECFSZ 77,F
046D:  GOTO   46B
046E:  DECFSZ 78,F
046F:  GOTO   469
0470:  MOVLW  4A
0471:  MOVWF  77
0472:  DECFSZ 77,F
0473:  GOTO   472
0474:  NOP
0475:  CLRWDT
0476:  DECFSZ 00,F
0477:  GOTO   467
0478:  RETURN
0479:  MOVLW  12
047A:  MOVLB  01
047B:  SUBWF  62,F
047C:  BTFSS  03.0
047D:  GOTO   48E
047E:  MOVLW  20
047F:  MOVWF  05
0480:  MOVLW  92
0481:  MOVWF  04
0482:  MOVLW  FC
0483:  ANDWF  00,F
0484:  BCF    03.0
0485:  RRF    00,F
0486:  RRF    00,F
0487:  MOVF   00,W
0488:  BTFSC  03.2
0489:  GOTO   48E
048A:  GOTO   48C
048B:  CLRWDT
048C:  DECFSZ 00,F
048D:  GOTO   48B
048E:  MOVLB  00
048F:  RETURN
.................... #pin_select SDA1=PIN_C4 
.................... #pin_select SCL1=PIN_C3 
.................... #use i2c(SLAVE, I2C1, address=0xA0) 
*
00A9:  MOVLB  03
00AA:  MOVF   0C,W
00AB:  MOVLB  02
00AC:  MOVF   33,W
00AD:  MOVLB  03
00AE:  MOVWF  0C
00AF:  BSF    10.4
00B0:  MOVLB  0E
00B1:  BCF    0F.0
00B2:  MOVLB  03
00B3:  BTFSC  0F.0
00B4:  GOTO   0B3
00B5:  CLRF   78
00B6:  BTFSS  11.6
00B7:  INCF   78,F
00B8:  MOVLB  02
.................... #use FIXED_IO(C_outputs = PIN_C2, PIN_C5, PIN_C6, PIN_C7) 
....................  
....................  
.................... #include <stdint.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... ////                           stdint.h                                //// 
.................... ////                                                                   //// 
.................... //// Standard integer definitions.                                     //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDINT 
....................  
.................... #define _STDINT 
....................  
.................... //////////// exact width 
....................  
.................... typedef signed int8 int8_t; 
.................... typedef unsigned int8 uint8_t; 
.................... typedef signed int16 int16_t; 
.................... typedef unsigned int16 uint16_t; 
.................... typedef signed int32 int32_t; 
.................... typedef unsigned int32 uint32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int24_t; 
.................... //typedef unsigned int24 uint24_t; 
.................... typedef signed int64 int64_t; 
.................... typedef unsigned int64 uint64_t; 
.................... #endif 
....................  
.................... #define INT8_MAX  (127) 
.................... #define INT8_MIN  (-128) 
.................... #define UINT8_MAX (255) 
....................  
.................... #define INT16_MAX  (32767) 
.................... #define INT16_MIN  (-32768) 
.................... #define UINT16_MAX (65535) 
....................  
.................... #define INT32_MAX  (2147483647) 
.................... #define INT32_MIN  (-2147483648) 
.................... #define UINT32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT24_MAX  (8388607) 
.................... //#define INT24_MIN  (-8388608) 
.................... //#define UINT24_MAX (16777215) 
....................  
.................... #define INT64_MAX  (9223372036854775807) 
.................... #define INT64_MIN  (-9223372036854775808) 
.................... #define UINT64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// minimum width 
....................  
.................... typedef signed int8 int_least8_t; 
.................... typedef unsigned int8 uint_least8_t; 
.................... typedef signed int16 int_least16_t; 
.................... typedef unsigned int16 uint_least16_t; 
.................... typedef signed int32 int_least32_t; 
.................... typedef unsigned int32 uint_least32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int_least24_t; 
.................... //typedef unsigned int24 uint_least24_t; 
.................... typedef signed int64 int_least64_t; 
.................... typedef unsigned int64 uint_least64_t; 
.................... #endif 
....................  
.................... #define INT_LEAST8_MAX  (127) 
.................... #define INT_LEAST8_MIN  (-128) 
.................... #define UINT_LEAST8_MAX (255) 
....................  
.................... #define INT_LEAST16_MAX  (32767) 
.................... #define INT_LEAST16_MIN  (-32768) 
.................... #define UINT_LEAST16_MAX (65535) 
....................  
.................... #define INT_LEAST32_MAX  (2147483647) 
.................... #define INT_LEAST32_MIN  (-2147483648) 
.................... #define UINT_LEAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_LEAST24_MAX  (8388607) 
.................... //#define INT_LEAST24_MIN  (-8388608) 
.................... //#define UINT_LEAST24_MAX (16777215) 
....................  
.................... #define INT_LEAST64_MAX  (9223372036854775807) 
.................... #define INT_LEAST64_MIN  (-9223372036854775808) 
.................... #define UINT_LEAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// fastest width 
....................  
.................... #if defined(__PCD__) 
.................... typedef signed int16 int_fast8_t; 
.................... typedef unsigned int16 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (32767) 
.................... #define INT_FAST8_MIN  (-32768) 
.................... #define UINT_FAST8_MAX (65535) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... //typedef signed int24 int_fast24_t; 
.................... //typedef unsigned int24 uint_fast24_t; 
.................... typedef signed int64 int_fast64_t; 
.................... typedef unsigned int64 uint_fast64_t; 
.................... #else 
.................... typedef signed int8 int_fast8_t; 
.................... typedef unsigned int8 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (127) 
.................... #define INT_FAST8_MIN  (-128) 
.................... #define UINT_FAST8_MAX (255) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... #endif 
....................  
.................... typedef signed int32 int_fast32_t; 
.................... typedef unsigned int32 uint_fast32_t; 
....................  
.................... #define INT_FAST16_MAX  (32767) 
.................... #define INT_FAST16_MIN  (-32768) 
.................... #define UINT_FAST16_MAX (65535) 
....................  
.................... #define INT_FAST32_MAX  (2147483647) 
.................... #define INT_FAST32_MIN  (-2147483648) 
.................... #define UINT_FAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_FAST24_MAX  (8388607) 
.................... //#define INT_FAST24_MIN  (-8388608) 
.................... //#define UINT_FAST24_MAX (16777215) 
....................  
.................... #define INT_FAST64_MAX  (9223372036854775807) 
.................... #define INT_FAST64_MIN  (-9223372036854775808) 
.................... #define UINT_FAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... //////////// big enough to hold pointers (OPTIONAL) 
....................  
.................... #if defined(__PCD__) 
....................    typedef unsigned int32 uintptr_t; 
....................    typedef signed int32 intptr_t; 
.................... #else 
....................    typedef unsigned int16 uintptr_t; 
....................    typedef signed int16 intptr_t; 
.................... #endif 
....................  
.................... /// TODO: 
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
....................  
....................  
.................... /////////// greatest width (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intmax_t uintmax_t 
....................  
.................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
....................  
.................... /// INTMAX_C(value) UINTMAX_C(value) 
....................  
....................  
.................... #endif 
....................  
....................  
.................... #define LFL_DELAY               60      //in seconds 
.................... #define LFL_RESTORE_DELAY       30      //in seconds 
.................... #define MAINS_HIGH_VOLT 280 
....................  
.................... #define AL115v20 
.................... //#define AL115v10 
....................  
.................... /* 
.................... PIC16F1516 to PIC16F886 change 
.................... EEPROM START changed from high endurance location to 0. 
.................... read_int16_alarmrom changed to read_int16_eeprom 
.................... write_program_eeprom changed to write_int16_eeprom 
.................... uncommented #ROM locations. 
....................  
.................... */ 
.................... //#include <internal_eeprom.c> 
.................... #include "definitions.c" 
....................  
....................  
.................... /***********************Analog Inputs******************************************/ 
....................  
.................... //The channels are different for PIC16F15354 
....................  
.................... #define DG_SELECT()         set_adc_channel(5) 
....................  
.................... #define BATT_SELECT()      set_adc_channel(0) 
....................  
.................... //#define DGBATT_SELECT()   set_adc_channel(11) 
....................  
.................... //#define TEMP_SELECT()      set_adc_channel(4) 
....................  
.................... #ifdef AL115v10 
....................     #define VOLT_ADJ_SELECT()   set_adc_channel(12) 
....................     #define BAT_ADJ_SELECT()   set_adc_channel(13) 
....................     #define MAINS_R_SELECT()   set_adc_channel(2) 
....................     #define MAINS_Y_SELECT()   set_adc_channel(3) 
....................     #define MAINS_B_SELECT()   set_adc_channel(1) 
.................... #else 
....................     #define VOLT_ADJ_SELECT()   set_adc_channel(13) 
....................     #define BAT_ADJ_SELECT()   set_adc_channel(12) 
....................     #define MAINS_R_SELECT()   set_adc_channel(3) 
....................     #define MAINS_Y_SELECT()   set_adc_channel(1) 
....................     #define MAINS_B_SELECT()   set_adc_channel(2) 
.................... #endif 
.................... //#define DGBAT_ADJ_SELECT() set_adc_channel(10) 
....................  
.................... //#define TEMP_ADJ_SELECT()   set_adc_channel(9) 
....................  
.................... /***********************Digital Inputs*****************************************/ 
....................  
.................... //#define FIRE_INPUT()   input(PIN_B6) 
....................  
.................... //#define LFL_INPUT()      !input(PIN_E3) 
....................  
.................... /***********************Outputs************************************************/ 
....................  
.................... #define RL_MAINS     PIN_C2 
....................  
.................... #define RL_DG        PIN_C7 
....................  
.................... #define RL_BATT      PIN_C6 
....................  
.................... #define LED_BATT   PIN_C5 
....................  
.................... #ifdef AL115v10 
....................     #define LED_R  PIN_B0 
....................     #define LED_Y  PIN_B1 
....................     #define LED_B  PIN_B2 
.................... #else 
....................     #define LED_R  PIN_B2 
....................     #define LED_Y  PIN_B1 
....................     #define LED_B  PIN_B0 
.................... #endif 
.................... /******************************************************************************/ 
....................  
.................... #define DELAY 1000 
....................  
.................... /******************************************************************************/ 
....................  
.................... //!#define CR   0x0D 
.................... //!#define LF   0x0A 
.................... //!#define BS   0x08 
.................... //!#define ESC  0x1B 
.................... //!#define SP   0x20 
.................... //!#define DEL  0x7F 
....................  
.................... /******************************************************************************/ 
....................  
....................  
.................... /******************************************************************************/ 
....................  
.................... uint8_t i2c_buffer[66]; 
....................  
.................... /******************************* Variables ************************************/ 
....................  
.................... uint16_t bat_volt_lu=0;// dgbat_volt_lu=0; //temperature; 
....................  
.................... uint16_t r_phase_volt=0, y_phase_volt=0, b_phase_volt=0; 
.................... uint16_t dg_volt=0; 
.................... //float bat_volt=0; 
....................  
.................... uint16_t volt_adj_reading=0; 
....................  
....................  
.................... //19 reading for every volt; 
.................... uint16_t bat_adj_reading=209;// dgbat_adj_reading=209, temp_adj_reading=0; 
....................  
....................  
.................... short lowbat=0, bat_low_already_detected=0; 
.................... //short dgbat_low_already_detected=0, dglowbat =0; 
.................... //short temp_high_already_detected =0, hightemp =0; 
.................... uint16_t phase_adjusted_volt; 
.................... short mains_ok=1; 
.................... //short dgon = 0; 
.................... short r_ok = 0, y_ok =0, b_ok =0; 
....................  
....................  
....................  
.................... uint16_t rcalibvoltreading=220, ycalibvoltreading   =   220; 
.................... uint16_t bcalibvoltreading=220, dgrcalibvoltreading=   220; 
.................... float rvoltratio=1.01, yvoltratio=1.01,bvoltratio=1.01, dgrvoltratio=1.01; 
.................... //unsigned long mainscalibvolt=220; 
.................... uint16_t calibvolt=220; 
....................  
.................... float btsbatvoltratio=9.7; 
.................... //float dgbatvoltratio=11.1; 
.................... //float tempratio = 10; 
....................  
.................... uint16_t btsbatcalibvoltreading=441; 
.................... uint16_t btsbatcalibvolt = 4800; 
....................  
....................  
.................... //uint16_t dgbatcalibvoltreading=539; 
.................... //uint16_t dgbatcalibvolt = 24; 
....................  
.................... float v_adj_ratio = .093, b_adj_ratio =.186; 
.................... //float db_adj_ratio = .093, t_adj_ratio =.186; 
....................  
.................... uint16_t v_range_high=0, b_range_high=0;// db_range_high=0, t_range_high =0; 
....................  
.................... //////////////for introducing alarm trigger delay 
....................  
....................  
.................... //////////for fire delay///////// 
.................... //short fire_previous = 0, fire_current =0; 
....................  
....................  
.................... /************************ Function Definitions ********************************/ 
....................  
.................... void clrscr(void); 
....................  
.................... #separate 
.................... void settings(void); 
....................  
.................... #separate 
.................... char timed_getc(void); 
....................  
....................  
.................... void reset_rom(void); 
....................  
.................... #separate 
.................... uint16_t UART_InUDec(void); 
....................  
.................... #separate 
.................... void write_calib_data(void); 
.................... #separate 
.................... void get_ac_readings(void); 
.................... #separate 
.................... void init_settings(void); 
....................  
.................... #separate 
.................... void read_rom_values(void); 
.................... #separate 
.................... void print_readings(void); 
....................  
.................... volatile uint16_t bat_row_an; 
....................  
.................... #include "rom.c" 
....................  
....................  
.................... #org 0xF80, 0xFFF { } 
.................... #define FLASH_EPROM_START 0xF80 
....................  
....................  
....................  
.................... //!#define write_int16_alarmrom write_int16_alarmrom 
.................... //!#define read_int16_alarmrom read_int16_alarmrom 
.................... /* 
.................... #ROM 0x2100 = {0xAA} 
....................  
.................... #ROM 0x2102 = {110}   //2 //rcalibvoltreading  on the channel  
.................... #ROM 0x2104 = {110}   //4 //ycalibvoltreading  on the channel   
.................... #ROM 0x2106 = {110}   //6 //bcalibvoltreading   on the channel 
.................... #ROM 0x2108 = {212}   //8 //dgrcalibvoltreading   on the channel 
....................  
.................... #ROM 0x210A = {227}   //10 // measured voltage at the time of calibration.   calibvolt                
....................  
.................... #rom 0x210C ={4800}   //12    //4800 //battery reading, ie 48.00 btsbatcalibvolt 
.................... #rom 0x210E ={462}    //14  //reading on the battery channel; batcalibvoltreading  
....................  
.................... #rom 0x2110   ={1184}      //16      // //dg battery reading, ie 11.84 dgbatcalibvolt                          
.................... #rom 0x2112 ={202}      //18  //reading on the dg battery channel; dgbatcalibvoltreading  
....................  
.................... #rom 0x2114 ={512}    //20      //mains adj full reading 
.................... #rom 0x2116 ={512}    //22      //bts bat adj full reading 
.................... #rom 0x2118 ={512}    //24      //dgbat adj full reading 
.................... #rom 0x211A ={512}    //26      //temperature adj full reading 
....................  
.................... */ 
....................  
.................... #separate 
.................... void write_int16_alarmrom(uint16_t address, uint16_t data) 
.................... { 
....................    write_program_eeprom(FLASH_EPROM_START + address, data); 
*
00D9:  MOVLW  80
00DA:  MOVLB  01
00DB:  ADDWF  5E,W
00DC:  MOVWF  62
00DD:  MOVLW  0F
00DE:  ADDWFC 5F,W
00DF:  MOVWF  63
00E0:  MOVF   62,W
00E1:  MOVLB  10
00E2:  MOVWF  1A
00E3:  MOVF   1A,W
00E4:  MOVWF  7A
00E5:  MOVLB  01
00E6:  MOVF   63,W
00E7:  MOVLB  10
00E8:  MOVWF  1B
00E9:  MOVLB  01
00EA:  MOVF   60,W
00EB:  MOVWF  78
00EC:  MOVF   61,W
00ED:  MOVWF  79
*
0144:  MOVLB  00
0145:  RETURN
.................... } 
....................  
.................... #separate 
.................... uint16_t read_int16_alarmrom(uint16_t address) 
.................... { 
....................     //return(0); 
....................    return(read_program_eeprom(address + FLASH_EPROM_START)); 
*
00BF:  MOVLW  80
00C0:  MOVLB  01
00C1:  ADDWF  5C,W
00C2:  MOVWF  5E
00C3:  MOVLW  0F
00C4:  ADDWFC 5D,W
00C5:  MOVWF  5F
00C6:  MOVF   5E,W
00C7:  MOVLB  10
00C8:  MOVWF  1A
00C9:  MOVLB  01
00CA:  MOVF   5F,W
00CB:  MOVLB  10
00CC:  MOVWF  1B
00CD:  BSF    1E.7
00CE:  BSF    1E.0
00CF:  NOP
00D0:  NOP
00D1:  MOVF   1D,W
00D2:  MOVWF  7A
00D3:  MOVF   1C,W
00D4:  MOVWF  78
00D5:  MOVF   1D,W
00D6:  MOVWF  79
00D7:  MOVLB  00
00D8:  RETURN
.................... } 
....................  
.................... #separate 
.................... void read_rom_values(void) 
.................... { 
....................  
....................    rcalibvoltreading=read_int16_alarmrom(2); 
*
01BB:  MOVLB  01
01BC:  CLRF   5D
01BD:  MOVLW  02
01BE:  MOVWF  5C
01BF:  MOVLB  00
01C0:  CALL   0BF
01C1:  MOVF   79,W
01C2:  MOVLB  01
01C3:  MOVWF  27
01C4:  MOVF   78,W
01C5:  MOVWF  26
....................    ycalibvoltreading=read_int16_alarmrom(4); 
01C6:  CLRF   5D
01C7:  MOVLW  04
01C8:  MOVWF  5C
01C9:  MOVLB  00
01CA:  CALL   0BF
01CB:  MOVF   79,W
01CC:  MOVLB  01
01CD:  MOVWF  29
01CE:  MOVF   78,W
01CF:  MOVWF  28
....................    bcalibvoltreading=read_int16_alarmrom(6); 
01D0:  CLRF   5D
01D1:  MOVLW  06
01D2:  MOVWF  5C
01D3:  MOVLB  00
01D4:  CALL   0BF
01D5:  MOVF   79,W
01D6:  MOVLB  01
01D7:  MOVWF  2B
01D8:  MOVF   78,W
01D9:  MOVWF  2A
....................    dgrcalibvoltreading=read_int16_alarmrom(8); 
01DA:  CLRF   5D
01DB:  MOVLW  08
01DC:  MOVWF  5C
01DD:  MOVLB  00
01DE:  CALL   0BF
01DF:  MOVF   79,W
01E0:  MOVLB  01
01E1:  MOVWF  2D
01E2:  MOVF   78,W
01E3:  MOVWF  2C
....................     
....................    btsbatcalibvolt= read_int16_alarmrom(12); 
01E4:  CLRF   5D
01E5:  MOVLW  0C
01E6:  MOVWF  5C
01E7:  MOVLB  00
01E8:  CALL   0BF
01E9:  MOVF   79,W
01EA:  MOVLB  01
01EB:  MOVWF  47
01EC:  MOVF   78,W
01ED:  MOVWF  46
....................    btsbatcalibvoltreading= read_int16_alarmrom(14); 
01EE:  CLRF   5D
01EF:  MOVLW  0E
01F0:  MOVWF  5C
01F1:  MOVLB  00
01F2:  CALL   0BF
01F3:  MOVF   79,W
01F4:  MOVLB  01
01F5:  MOVWF  45
01F6:  MOVF   78,W
01F7:  MOVWF  44
....................     
....................     
....................    v_range_high = read_int16_alarmrom(20);   //voltage 
01F8:  CLRF   5D
01F9:  MOVLW  14
01FA:  MOVWF  5C
01FB:  MOVLB  00
01FC:  CALL   0BF
01FD:  MOVF   79,W
01FE:  MOVLB  01
01FF:  MOVWF  51
0200:  MOVF   78,W
0201:  MOVWF  50
....................     
....................    b_range_high = read_int16_alarmrom(22);     //bts battery   
0202:  CLRF   5D
0203:  MOVLW  16
0204:  MOVWF  5C
0205:  MOVLB  00
0206:  CALL   0BF
0207:  MOVF   79,W
0208:  MOVLB  01
0209:  MOVWF  53
020A:  MOVF   78,W
020B:  MOVWF  52
020C:  MOVLB  00
020D:  RETURN
....................     
....................  
.................... } 
....................  
.................... //#separate 
.................... void write_calib_data(void) 
.................... { 
....................    write_int16_alarmrom(10, calibvolt); 
....................     
....................    write_int16_alarmrom(2, rcalibvoltreading); 
....................    write_int16_alarmrom(4, ycalibvoltreading); 
....................    write_int16_alarmrom(6, bcalibvoltreading); 
....................    write_int16_alarmrom(8, dgrcalibvoltreading); 
....................  
.................... } 
....................  
.................... void ResetRomPhase(void) 
.................... { 
....................  
.................... #ifdef AL115v10 
....................    write_int16_alarmrom(2, 119); 
....................    write_int16_alarmrom(4, 119); 
....................    write_int16_alarmrom(6, 119); 
.................... #else 
....................    write_int16_alarmrom(2, 216); 
*
0146:  MOVLB  01
0147:  CLRF   5F
0148:  MOVLW  02
0149:  MOVWF  5E
014A:  CLRF   61
014B:  MOVLW  D8
014C:  MOVWF  60
014D:  MOVLB  00
014E:  CALL   0D9
....................    write_int16_alarmrom(4, 216); 
014F:  MOVLB  01
0150:  CLRF   5F
0151:  MOVLW  04
0152:  MOVWF  5E
0153:  CLRF   61
0154:  MOVLW  D8
0155:  MOVWF  60
0156:  MOVLB  00
0157:  CALL   0D9
....................    write_int16_alarmrom(6, 216); 
0158:  MOVLB  01
0159:  CLRF   5F
015A:  MOVLW  06
015B:  MOVWF  5E
015C:  CLRF   61
015D:  MOVLW  D8
015E:  MOVWF  60
015F:  MOVLB  00
0160:  CALL   0D9
.................... #endif 
....................    write_int16_alarmrom(8, 216); 
0161:  MOVLB  01
0162:  CLRF   5F
0163:  MOVLW  08
0164:  MOVWF  5E
0165:  CLRF   61
0166:  MOVLW  D8
0167:  MOVWF  60
0168:  MOVLB  00
0169:  CALL   0D9
....................     
....................    write_int16_alarmrom(10, 227); 
016A:  MOVLB  01
016B:  CLRF   5F
016C:  MOVLW  0A
016D:  MOVWF  5E
016E:  CLRF   61
016F:  MOVLW  E3
0170:  MOVWF  60
0171:  MOVLB  00
0172:  CALL   0D9
0173:  RETURN
.................... } 
....................  
.................... void ResetRomBattery(void) 
.................... { 
....................    write_int16_alarmrom(12, 4800);   //bts battery voltage at calib 
0174:  MOVLB  01
0175:  CLRF   5F
0176:  MOVLW  0C
0177:  MOVWF  5E
0178:  MOVLW  12
0179:  MOVWF  61
017A:  MOVLW  C0
017B:  MOVWF  60
017C:  MOVLB  00
017D:  CALL   0D9
.................... #ifdef AL115v10 
....................    write_int16_alarmrom(14, 468);   //bts reading at calib 
.................... #else 
....................    write_int16_alarmrom(14, 425);   //bts reading at calib 
017E:  MOVLB  01
017F:  CLRF   5F
0180:  MOVLW  0E
0181:  MOVWF  5E
0182:  MOVLW  01
0183:  MOVWF  61
0184:  MOVLW  A9
0185:  MOVWF  60
0186:  MOVLB  00
0187:  CALL   0D9
.................... #endif 
0188:  RETURN
....................      
.................... } 
....................  
.................... void ResetRomKnob(void) 
.................... { 
....................    write_int16_alarmrom(20, 512);   //knob 
0189:  MOVLB  01
018A:  CLRF   5F
018B:  MOVLW  14
018C:  MOVWF  5E
018D:  MOVLW  02
018E:  MOVWF  61
018F:  CLRF   60
0190:  MOVLB  00
0191:  CALL   0D9
....................    write_int16_alarmrom(22, 512);   //knob 
0192:  MOVLB  01
0193:  CLRF   5F
0194:  MOVLW  16
0195:  MOVWF  5E
0196:  MOVLW  02
0197:  MOVWF  61
0198:  CLRF   60
0199:  MOVLB  00
019A:  CALL   0D9
....................    write_int16_alarmrom(24, 512);   //knob 
019B:  MOVLB  01
019C:  CLRF   5F
019D:  MOVLW  18
019E:  MOVWF  5E
019F:  MOVLW  02
01A0:  MOVWF  61
01A1:  CLRF   60
01A2:  MOVLB  00
01A3:  CALL   0D9
....................    write_int16_alarmrom(26, 512);   //knob    
01A4:  MOVLB  01
01A5:  CLRF   5F
01A6:  MOVLW  1A
01A7:  MOVWF  5E
01A8:  MOVLW  02
01A9:  MOVWF  61
01AA:  CLRF   60
01AB:  MOVLB  00
01AC:  CALL   0D9
01AD:  RETURN
.................... } 
....................  
.................... void reset_rom(void) 
.................... { 
....................    write_int16_alarmrom(0, 0xAA); 
01AE:  MOVLB  01
01AF:  CLRF   5F
01B0:  CLRF   5E
01B1:  CLRF   61
01B2:  MOVLW  AA
01B3:  MOVWF  60
01B4:  MOVLB  00
01B5:  CALL   0D9
....................     
....................    ResetRomPhase(); 
01B6:  CALL   146
....................     
....................    ResetRomBattery(); 
01B7:  CALL   174
....................     
....................    ResetRomKnob(); 
01B8:  CALL   189
01B9:  MOVLP  08
01BA:  GOTO   6BD (RETURN)
....................  
.................... } 
....................  
....................  
....................  
.................... /* 
....................  
.................... i2c slave data 
....................  
.................... 1, 2   mains knob reading 
.................... 3, 4   bts knob reading 
.................... 5, 6   dg knob reading 
.................... 7, 8   Temperature knob reading 
.................... 9, 10   bts battery voltage 
.................... 11, 12   dg battery voltage 
.................... 13, 14   Temperature 
.................... 15, 16   mains r voltage 
.................... 17, 18   mains y voltage 
.................... 19, 20   mains b voltage 
.................... 21, 22   dgr voltage 
....................  
.................... i2c eeprom data 
....................  
.................... 23, 24   mains r calibration voltage 
.................... 25, 26   mains y calibration voltage 
.................... 27, 28   mains b calibration voltage 
.................... 29, 30   dgr calibration voltage 
.................... 31, 32   mains knob calibration        //31 is all knob decalibration                              
.................... 33, 34   dg bat knob calibration 
.................... 35, 36   bts bat knob calibration 
.................... 37, 38   temperature knob calibration 
.................... 39, 40   bts calibration voltage 
.................... 41, 42   dgbat calibration voltage 
.................... 43, 44   simulation mains fail 
.................... 45, 46   simulation dg on 
.................... 47, 48   simulation dg battery low 
.................... 49, 50   simulation low fuel 
.................... 51, 52   simulation high temperature 
.................... 53, 54   simulation bts battery low 
.................... 55, 56   simulation fire 
.................... 57, 58   58 = decalibrate battery   57= decalibrate phases 
.................... 59, 60   simulation time in minutes 
.................... 61, 62   i2c write happened. 
....................  
.................... i2c i/o 
....................  
.................... 63, 64   error code value 
....................  
.................... */ 
....................  
....................  
....................  
.................... #include "checkconditions.c" 
.................... #separate 
.................... uint16_t phasecheck(void) 
*
0490:  MOVLB  01
0491:  CLRF   5C
0492:  CLRF   5E
0493:  CLRF   5D
0494:  CLRF   60
0495:  CLRF   5F
.................... {    
....................    uint8_t k=0; 
....................    uint16_t value5=0,value=0; 
....................     for(k=0;k<10;k++) 
0496:  CLRF   5C
0497:  MOVF   5C,W
0498:  SUBLW  09
0499:  BTFSS  03.0
049A:  GOTO   4B7
....................     { 
....................       delay_us(2000); 
049B:  CLRWDT
049C:  MOVLW  01
049D:  MOVWF  61
049E:  MOVLB  00
049F:  CALL   460
04A0:  MOVLW  09
04A1:  MOVLB  01
04A2:  MOVWF  61
04A3:  MOVLW  6C
04A4:  MOVWF  62
04A5:  MOVLB  00
04A6:  CALL   479
04A7:  MOVLB  01
04A8:  DECFSZ 61,F
04A9:  GOTO   4A3
....................       value=read_adc(); 
04AA:  BSF    1D.1
04AB:  BTFSC  1D.1
04AC:  GOTO   4AB
04AD:  MOVF   1B,W
04AE:  MOVWF  5F
04AF:  MOVF   1C,W
04B0:  MOVWF  60
....................       value5=value5+value; 
04B1:  MOVF   5F,W
04B2:  ADDWF  5D,F
04B3:  MOVF   60,W
04B4:  ADDWFC 5E,F
04B5:  INCF   5C,F
04B6:  GOTO   497
....................     }      
....................     value=value5/10; 
04B7:  MOVF   5E,W
04B8:  MOVWF  62
04B9:  MOVF   5D,W
04BA:  MOVWF  61
04BB:  CLRF   64
04BC:  MOVLW  0A
04BD:  MOVWF  63
*
04E2:  MOVF   79,W
04E3:  MOVWF  60
04E4:  MOVF   78,W
04E5:  MOVWF  5F
....................     return(value); 
04E6:  MOVF   5F,W
04E7:  MOVWF  78
04E8:  MOVF   60,W
04E9:  MOVWF  79
04EA:  MOVLB  00
04EB:  RETURN
.................... } 
....................  
.................... uint16_t phasecheck3(void) 
*
0725:  MOVLB  01
0726:  CLRF   5C
0727:  BCF    5D.0
0728:  BTFSS  1D.1
0729:  BSF    5D.0
072A:  CLRF   61
072B:  CLRF   60
072C:  CLRF   5F
072D:  CLRF   5E
072E:  CLRF   65
072F:  CLRF   64
0730:  CLRF   63
0731:  CLRF   62
.................... {    
....................    uint8_t k=0; 
....................    int1 done = adc_done(); 
....................    uint32_t value5=0,value=0; 
....................     for(k=0;k<200;k++) 
0732:  CLRF   5C
0733:  MOVF   5C,W
0734:  SUBLW  C7
0735:  BTFSS  03.0
0736:  GOTO   756
....................     { 
....................       delay_us(100); 
0737:  CLRWDT
0738:  MOVLW  20
0739:  MOVWF  77
073A:  DECFSZ 77,F
073B:  GOTO   73A
073C:  GOTO   73D
....................       value=read_adc(); 
073D:  BSF    1D.1
073E:  BTFSC  1D.1
073F:  GOTO   73E
0740:  MOVF   1B,W
0741:  MOVWF  62
0742:  MOVF   1C,W
0743:  MOVWF  63
0744:  CLRF   64
0745:  CLRF   65
....................       while(!done) {    
0746:  BTFSC  5D.0
0747:  GOTO   74C
....................          done = adc_done(); 
0748:  BCF    5D.0
0749:  BTFSS  1D.1
074A:  BSF    5D.0
074B:  GOTO   746
....................       } 
....................  
....................       value5=value5+value; 
074C:  MOVF   62,W
074D:  ADDWF  5E,F
074E:  MOVF   63,W
074F:  ADDWFC 5F,F
0750:  MOVF   64,W
0751:  ADDWFC 60,F
0752:  MOVF   65,W
0753:  ADDWFC 61,F
0754:  INCF   5C,F
0755:  GOTO   733
....................     }      
....................     value=value5/200; 
0756:  BCF    03.1
0757:  MOVF   61,W
0758:  MOVWF  69
0759:  MOVF   60,W
075A:  MOVWF  68
075B:  MOVF   5F,W
075C:  MOVWF  67
075D:  MOVF   5E,W
075E:  MOVWF  66
075F:  CLRF   6D
0760:  CLRF   6C
0761:  CLRF   6B
0762:  MOVLW  C8
0763:  MOVWF  6A
*
07CF:  MOVF   7A,W
07D0:  MOVLB  01
07D1:  MOVWF  65
07D2:  MOVF   79,W
07D3:  MOVWF  64
07D4:  MOVF   78,W
07D5:  MOVWF  63
07D6:  MOVF   77,W
07D7:  MOVWF  62
....................     return((uint16_t)value); 
07D8:  MOVF   62,W
07D9:  MOVWF  78
07DA:  MOVF   63,W
07DB:  MOVWF  79
07DC:  MOVLB  00
07DD:  RETURN
.................... } 
....................  
.................... #separate 
.................... uint16_t phasecheck2(void) 
*
06F0:  MOVLB  01
06F1:  CLRF   59
06F2:  CLRF   58
06F3:  CLRF   5B
06F4:  CLRF   5A
06F5:  CLRF   5D
06F6:  CLRF   5C
.................... {    
....................    uint16_t k=0; 
....................    uint16_t value5=0,value=0; 
....................     for(k=0;k<10;k++) 
06F7:  CLRF   59
06F8:  CLRF   58
06F9:  MOVF   59,F
06FA:  BTFSS  03.2
06FB:  GOTO   71E
06FC:  MOVF   58,W
06FD:  SUBLW  09
06FE:  BTFSS  03.0
06FF:  GOTO   71E
....................     { 
....................       delay_us(2000); 
0700:  CLRWDT
0701:  MOVLW  01
0702:  MOVWF  61
0703:  MOVLB  00
0704:  CALL   460
0705:  MOVLW  09
0706:  MOVLB  01
0707:  MOVWF  5E
0708:  MOVLW  6C
0709:  MOVWF  62
070A:  MOVLB  00
070B:  CALL   479
070C:  MOVLB  01
070D:  DECFSZ 5E,F
070E:  GOTO   708
....................       value=read_adc(); 
070F:  BSF    1D.1
0710:  BTFSC  1D.1
0711:  GOTO   710
0712:  MOVF   1B,W
0713:  MOVWF  5C
0714:  MOVF   1C,W
0715:  MOVWF  5D
....................       value5=value5+value; 
0716:  MOVF   5C,W
0717:  ADDWF  5A,F
0718:  MOVF   5D,W
0719:  ADDWFC 5B,F
071A:  INCF   58,F
071B:  BTFSC  03.2
071C:  INCF   59,F
071D:  GOTO   6F9
....................     }      
....................     return(value5); 
071E:  MOVF   5A,W
071F:  MOVWF  78
0720:  MOVF   5B,W
0721:  MOVWF  79
0722:  MOVLP  08
0723:  MOVLB  00
0724:  GOTO   095 (RETURN)
.................... } 
....................  
.................... #separate 
.................... void find_adj_volt() 
.................... { 
....................  
....................    VOLT_ADJ_SELECT(); 
*
0800:  MOVLW  34
0801:  MOVWF  78
0802:  MOVLB  01
0803:  MOVF   1D,W
0804:  ANDLW  03
0805:  IORWF  78,W
0806:  MOVWF  1D
....................    delay_ms(1); 
0807:  MOVLW  01
0808:  MOVWF  61
0809:  MOVLP  00
080A:  MOVLB  00
080B:  CALL   460
080C:  MOVLP  08
....................    volt_adj_reading=phasecheck()*10; 
080D:  MOVLP  00
080E:  CALL   490
080F:  MOVLP  08
0810:  MOVF   79,W
0811:  MOVLB  01
0812:  MOVWF  59
0813:  MOVF   78,W
0814:  MOVWF  58
0815:  MOVF   59,W
0816:  MOVWF  5B
0817:  MOVF   58,W
0818:  MOVWF  5A
0819:  CLRF   5D
081A:  MOVLW  0A
081B:  MOVWF  5C
*
0830:  MOVF   79,W
0831:  MOVWF  21
0832:  MOVF   78,W
0833:  MOVWF  20
....................    phase_adjusted_volt=   130+ (float)phasecheck()*v_adj_ratio; 
0834:  MOVLP  00
0835:  MOVLB  00
0836:  CALL   490
0837:  MOVLP  08
0838:  MOVF   79,W
0839:  MOVLB  01
083A:  MOVWF  69
083B:  MOVF   78,W
083C:  MOVWF  68
083D:  MOVLP  00
083E:  MOVLB  00
083F:  CALL   20E
0840:  MOVLP  08
0841:  MOVF   7A,W
0842:  MOVLB  01
0843:  MOVWF  5B
0844:  MOVF   79,W
0845:  MOVWF  5A
0846:  MOVF   78,W
0847:  MOVWF  59
0848:  MOVF   77,W
0849:  MOVWF  58
084A:  MOVF   5B,W
084B:  MOVWF  67
084C:  MOVF   5A,W
084D:  MOVWF  66
084E:  MOVF   59,W
084F:  MOVWF  65
0850:  MOVF   58,W
0851:  MOVWF  64
0852:  MOVF   4B,W
0853:  MOVWF  6B
0854:  MOVF   4A,W
0855:  MOVWF  6A
0856:  MOVF   49,W
0857:  MOVWF  69
0858:  MOVF   48,W
0859:  MOVWF  68
085A:  MOVLP  00
085B:  MOVLB  00
085C:  CALL   4EC
085D:  MOVLP  08
085E:  MOVF   05,W
085F:  MOVLB  01
0860:  MOVWF  59
0861:  MOVF   04,W
0862:  MOVWF  58
0863:  BCF    03.1
0864:  CLRF   61
0865:  CLRF   60
0866:  MOVLW  02
0867:  MOVWF  5F
0868:  MOVLW  86
0869:  MOVWF  5E
086A:  MOVF   7A,W
086B:  MOVWF  65
086C:  MOVF   79,W
086D:  MOVWF  64
086E:  MOVF   78,W
086F:  MOVWF  63
0870:  MOVF   77,W
0871:  MOVWF  62
0872:  MOVLP  00
0873:  MOVLB  00
0874:  CALL   588
0875:  MOVLP  08
0876:  MOVLB  01
0877:  MOVF   59,W
0878:  MOVWF  05
0879:  MOVF   58,W
087A:  MOVWF  04
087B:  MOVF   7A,W
087C:  MOVWF  63
087D:  MOVF   79,W
087E:  MOVWF  62
087F:  MOVF   78,W
0880:  MOVWF  61
0881:  MOVF   77,W
0882:  MOVWF  60
0883:  MOVLP  00
0884:  MOVLB  00
0885:  CALL   6CF
0886:  MOVLP  08
0887:  MOVF   79,W
0888:  MOVLB  01
0889:  MOVWF  25
088A:  MOVF   78,W
088B:  MOVWF  24
....................     
....................    BAT_ADJ_SELECT(); 
088C:  MOVLW  30
088D:  MOVWF  78
088E:  MOVF   1D,W
088F:  ANDLW  03
0890:  IORWF  78,W
0891:  MOVWF  1D
.................... //   delay_ms(1); 
....................    bat_adj_reading=(float)phasecheck2()*b_adj_ratio +  4600;   //1v = 100 
0892:  MOVLP  00
0893:  MOVLB  00
0894:  GOTO   6F0
0895:  MOVLP  08
0896:  MOVF   79,W
0897:  MOVLB  01
0898:  MOVWF  69
0899:  MOVF   78,W
089A:  MOVWF  68
089B:  MOVLP  00
089C:  MOVLB  00
089D:  CALL   20E
089E:  MOVLP  08
089F:  MOVF   7A,W
08A0:  MOVLB  01
08A1:  MOVWF  5B
08A2:  MOVF   79,W
08A3:  MOVWF  5A
08A4:  MOVF   78,W
08A5:  MOVWF  59
08A6:  MOVF   77,W
08A7:  MOVWF  58
08A8:  MOVF   5B,W
08A9:  MOVWF  67
08AA:  MOVF   5A,W
08AB:  MOVWF  66
08AC:  MOVF   59,W
08AD:  MOVWF  65
08AE:  MOVF   58,W
08AF:  MOVWF  64
08B0:  MOVF   4F,W
08B1:  MOVWF  6B
08B2:  MOVF   4E,W
08B3:  MOVWF  6A
08B4:  MOVF   4D,W
08B5:  MOVWF  69
08B6:  MOVF   4C,W
08B7:  MOVWF  68
08B8:  MOVLP  00
08B9:  MOVLB  00
08BA:  CALL   4EC
08BB:  MOVLP  08
08BC:  MOVF   7A,W
08BD:  MOVLB  01
08BE:  MOVWF  5B
08BF:  MOVF   79,W
08C0:  MOVWF  5A
08C1:  MOVF   78,W
08C2:  MOVWF  59
08C3:  MOVF   77,W
08C4:  MOVWF  58
08C5:  MOVF   05,W
08C6:  MOVWF  5D
08C7:  MOVF   04,W
08C8:  MOVWF  5C
08C9:  BCF    03.1
08CA:  MOVF   5B,W
08CB:  MOVWF  61
08CC:  MOVF   5A,W
08CD:  MOVWF  60
08CE:  MOVF   59,W
08CF:  MOVWF  5F
08D0:  MOVF   58,W
08D1:  MOVWF  5E
08D2:  CLRF   65
08D3:  MOVLW  C0
08D4:  MOVWF  64
08D5:  MOVLW  0F
08D6:  MOVWF  63
08D7:  MOVLW  8B
08D8:  MOVWF  62
08D9:  MOVLP  00
08DA:  MOVLB  00
08DB:  CALL   588
08DC:  MOVLP  08
08DD:  MOVLB  01
08DE:  MOVF   5D,W
08DF:  MOVWF  05
08E0:  MOVF   5C,W
08E1:  MOVWF  04
08E2:  MOVF   7A,W
08E3:  MOVWF  63
08E4:  MOVF   79,W
08E5:  MOVWF  62
08E6:  MOVF   78,W
08E7:  MOVWF  61
08E8:  MOVF   77,W
08E9:  MOVWF  60
08EA:  MOVLP  00
08EB:  MOVLB  00
08EC:  CALL   6CF
08ED:  MOVLP  08
08EE:  MOVF   79,W
08EF:  MOVLB  01
08F0:  MOVWF  23
08F1:  MOVF   78,W
08F2:  MOVWF  22
08F3:  MOVLB  00
08F4:  RETURN
....................     
.................... } 
....................  
....................  
.................... void checkconditions() 
.................... { 
.................... //!   unsigned i=0; 
....................     
.................... ////////////////////voltage adjustment select///////// 
....................    find_adj_volt(); 
*
094D:  CALL   000
....................     
.................... ////////////////mains voltage///////// 
....................    MAINS_R_SELECT(); 
094E:  MOVLW  0C
094F:  MOVWF  78
0950:  MOVLB  01
0951:  MOVF   1D,W
0952:  ANDLW  03
0953:  IORWF  78,W
0954:  MOVWF  1D
.................... //   delay_ms(1); 
....................    r_phase_volt=phasecheck()*rvoltratio; 
0955:  MOVLP  00
0956:  MOVLB  00
0957:  CALL   490
0958:  MOVLP  08
0959:  MOVF   79,W
095A:  MOVLB  01
095B:  MOVWF  59
095C:  MOVF   78,W
095D:  MOVWF  58
095E:  MOVF   59,W
095F:  MOVWF  69
0960:  MOVF   58,W
0961:  MOVWF  68
0962:  MOVLP  00
0963:  MOVLB  00
0964:  CALL   20E
0965:  MOVLP  08
0966:  MOVF   7A,W
0967:  MOVLB  01
0968:  MOVWF  67
0969:  MOVF   79,W
096A:  MOVWF  66
096B:  MOVF   78,W
096C:  MOVWF  65
096D:  MOVF   77,W
096E:  MOVWF  64
096F:  MOVF   31,W
0970:  MOVWF  6B
0971:  MOVF   30,W
0972:  MOVWF  6A
0973:  MOVF   2F,W
0974:  MOVWF  69
0975:  MOVF   2E,W
0976:  MOVWF  68
0977:  MOVLP  00
0978:  MOVLB  00
0979:  CALL   4EC
097A:  MOVLP  08
097B:  MOVF   7A,W
097C:  MOVLB  01
097D:  MOVWF  63
097E:  MOVF   79,W
097F:  MOVWF  62
0980:  MOVF   78,W
0981:  MOVWF  61
0982:  MOVF   77,W
0983:  MOVWF  60
0984:  MOVLP  00
0985:  MOVLB  00
0986:  CALL   6CF
0987:  MOVLP  08
0988:  MOVF   79,W
0989:  MOVWF  69
098A:  MOVF   78,W
098B:  MOVWF  68
....................     
....................    MAINS_Y_SELECT(); 
098C:  MOVLW  04
098D:  MOVWF  78
098E:  MOVLB  01
098F:  MOVF   1D,W
0990:  ANDLW  03
0991:  IORWF  78,W
0992:  MOVWF  1D
....................  
....................    y_phase_volt=phasecheck()*yvoltratio; 
0993:  MOVLP  00
0994:  MOVLB  00
0995:  CALL   490
0996:  MOVLP  08
0997:  MOVF   79,W
0998:  MOVLB  01
0999:  MOVWF  59
099A:  MOVF   78,W
099B:  MOVWF  58
099C:  MOVF   59,W
099D:  MOVWF  69
099E:  MOVF   58,W
099F:  MOVWF  68
09A0:  MOVLP  00
09A1:  MOVLB  00
09A2:  CALL   20E
09A3:  MOVLP  08
09A4:  MOVF   7A,W
09A5:  MOVLB  01
09A6:  MOVWF  67
09A7:  MOVF   79,W
09A8:  MOVWF  66
09A9:  MOVF   78,W
09AA:  MOVWF  65
09AB:  MOVF   77,W
09AC:  MOVWF  64
09AD:  MOVF   35,W
09AE:  MOVWF  6B
09AF:  MOVF   34,W
09B0:  MOVWF  6A
09B1:  MOVF   33,W
09B2:  MOVWF  69
09B3:  MOVF   32,W
09B4:  MOVWF  68
09B5:  MOVLP  00
09B6:  MOVLB  00
09B7:  CALL   4EC
09B8:  MOVLP  08
09B9:  MOVF   7A,W
09BA:  MOVLB  01
09BB:  MOVWF  63
09BC:  MOVF   79,W
09BD:  MOVWF  62
09BE:  MOVF   78,W
09BF:  MOVWF  61
09C0:  MOVF   77,W
09C1:  MOVWF  60
09C2:  MOVLP  00
09C3:  MOVLB  00
09C4:  CALL   6CF
09C5:  MOVLP  08
09C6:  MOVF   79,W
09C7:  MOVWF  6B
09C8:  MOVF   78,W
09C9:  MOVWF  6A
....................     
....................    MAINS_B_SELECT(); 
09CA:  MOVLW  08
09CB:  MOVWF  78
09CC:  MOVLB  01
09CD:  MOVF   1D,W
09CE:  ANDLW  03
09CF:  IORWF  78,W
09D0:  MOVWF  1D
....................  
....................    b_phase_volt=phasecheck()*bvoltratio; 
09D1:  MOVLP  00
09D2:  MOVLB  00
09D3:  CALL   490
09D4:  MOVLP  08
09D5:  MOVF   79,W
09D6:  MOVLB  01
09D7:  MOVWF  59
09D8:  MOVF   78,W
09D9:  MOVWF  58
09DA:  MOVF   59,W
09DB:  MOVWF  69
09DC:  MOVF   58,W
09DD:  MOVWF  68
09DE:  MOVLP  00
09DF:  MOVLB  00
09E0:  CALL   20E
09E1:  MOVLP  08
09E2:  MOVF   7A,W
09E3:  MOVLB  01
09E4:  MOVWF  67
09E5:  MOVF   79,W
09E6:  MOVWF  66
09E7:  MOVF   78,W
09E8:  MOVWF  65
09E9:  MOVF   77,W
09EA:  MOVWF  64
09EB:  MOVF   39,W
09EC:  MOVWF  6B
09ED:  MOVF   38,W
09EE:  MOVWF  6A
09EF:  MOVF   37,W
09F0:  MOVWF  69
09F1:  MOVF   36,W
09F2:  MOVWF  68
09F3:  MOVLP  00
09F4:  MOVLB  00
09F5:  CALL   4EC
09F6:  MOVLP  08
09F7:  MOVF   7A,W
09F8:  MOVLB  01
09F9:  MOVWF  63
09FA:  MOVF   79,W
09FB:  MOVWF  62
09FC:  MOVF   78,W
09FD:  MOVWF  61
09FE:  MOVF   77,W
09FF:  MOVWF  60
0A00:  MOVLP  00
0A01:  MOVLB  00
0A02:  CALL   6CF
0A03:  MOVLP  08
0A04:  MOVF   79,W
0A05:  MOVWF  6D
0A06:  MOVF   78,W
0A07:  MOVWF  6C
.................... /* 
....................    if(!mains_ok) 
....................       phase_adjusted_volt=phase_adjusted_volt+3; 
....................    mains_ok=((r_phase_volt>phase_adjusted_volt)&&(y_phase_volt>phase_adjusted_volt)&&(b_phase_volt>phase_adjusted_volt)); 
....................    if((r_phase_volt>MAINS_HIGH_VOLT)||(y_phase_volt>MAINS_HIGH_VOLT)||(b_phase_volt>MAINS_HIGH_VOLT)) 
....................       mains_ok=0; 
.................... */ 
....................  
.................... ///r 
....................    if(r_ok ==0) 
0A08:  BTFSC  70.3
0A09:  GOTO   21E
....................       r_ok = r_phase_volt > (phase_adjusted_volt + 3); 
0A0A:  BCF    70.3
0A0B:  MOVLW  03
0A0C:  MOVLB  01
0A0D:  ADDWF  24,W
0A0E:  MOVWF  78
0A0F:  MOVLW  00
0A10:  ADDWFC 25,W
0A11:  MOVWF  7A
0A12:  MOVF   7A,W
0A13:  MOVLB  00
0A14:  SUBWF  69,W
0A15:  BTFSS  03.0
0A16:  GOTO   21D
0A17:  BTFSS  03.2
0A18:  GOTO   21C
0A19:  MOVF   68,W
0A1A:  SUBWF  78,W
0A1B:  BTFSS  03.0
0A1C:  BSF    70.3
0A1D:  GOTO   230
....................    else 
....................       r_ok = r_phase_volt > phase_adjusted_volt; 
0A1E:  BCF    70.3
0A1F:  MOVLB  01
0A20:  MOVF   25,W
0A21:  MOVLB  00
0A22:  SUBWF  69,W
0A23:  BTFSS  03.0
0A24:  GOTO   230
0A25:  BTFSS  03.2
0A26:  GOTO   22F
0A27:  MOVF   68,W
0A28:  MOVLB  01
0A29:  SUBWF  24,W
0A2A:  BTFSS  03.0
0A2B:  GOTO   22E
0A2C:  MOVLB  00
0A2D:  GOTO   230
0A2E:  MOVLB  00
0A2F:  BSF    70.3
....................  
....................     
.................... ///y    
....................    if(y_ok ==0) 
0A30:  BTFSC  70.4
0A31:  GOTO   246
....................       y_ok = y_phase_volt > (phase_adjusted_volt + 3); 
0A32:  BCF    70.4
0A33:  MOVLW  03
0A34:  MOVLB  01
0A35:  ADDWF  24,W
0A36:  MOVWF  78
0A37:  MOVLW  00
0A38:  ADDWFC 25,W
0A39:  MOVWF  7A
0A3A:  MOVF   7A,W
0A3B:  MOVLB  00
0A3C:  SUBWF  6B,W
0A3D:  BTFSS  03.0
0A3E:  GOTO   245
0A3F:  BTFSS  03.2
0A40:  GOTO   244
0A41:  MOVF   6A,W
0A42:  SUBWF  78,W
0A43:  BTFSS  03.0
0A44:  BSF    70.4
0A45:  GOTO   258
....................    else 
....................       y_ok = y_phase_volt > phase_adjusted_volt; 
0A46:  BCF    70.4
0A47:  MOVLB  01
0A48:  MOVF   25,W
0A49:  MOVLB  00
0A4A:  SUBWF  6B,W
0A4B:  BTFSS  03.0
0A4C:  GOTO   258
0A4D:  BTFSS  03.2
0A4E:  GOTO   257
0A4F:  MOVF   6A,W
0A50:  MOVLB  01
0A51:  SUBWF  24,W
0A52:  BTFSS  03.0
0A53:  GOTO   256
0A54:  MOVLB  00
0A55:  GOTO   258
0A56:  MOVLB  00
0A57:  BSF    70.4
....................  
....................  
.................... ///b    
....................    if(b_ok ==0) 
0A58:  BTFSC  70.5
0A59:  GOTO   26E
....................       b_ok = b_phase_volt > (phase_adjusted_volt + 3); 
0A5A:  BCF    70.5
0A5B:  MOVLW  03
0A5C:  MOVLB  01
0A5D:  ADDWF  24,W
0A5E:  MOVWF  78
0A5F:  MOVLW  00
0A60:  ADDWFC 25,W
0A61:  MOVWF  7A
0A62:  MOVF   7A,W
0A63:  MOVLB  00
0A64:  SUBWF  6D,W
0A65:  BTFSS  03.0
0A66:  GOTO   26D
0A67:  BTFSS  03.2
0A68:  GOTO   26C
0A69:  MOVF   6C,W
0A6A:  SUBWF  78,W
0A6B:  BTFSS  03.0
0A6C:  BSF    70.5
0A6D:  GOTO   280
....................    else 
....................       b_ok = b_phase_volt > phase_adjusted_volt; 
0A6E:  BCF    70.5
0A6F:  MOVLB  01
0A70:  MOVF   25,W
0A71:  MOVLB  00
0A72:  SUBWF  6D,W
0A73:  BTFSS  03.0
0A74:  GOTO   280
0A75:  BTFSS  03.2
0A76:  GOTO   27F
0A77:  MOVF   6C,W
0A78:  MOVLB  01
0A79:  SUBWF  24,W
0A7A:  BTFSS  03.0
0A7B:  GOTO   27E
0A7C:  MOVLB  00
0A7D:  GOTO   280
0A7E:  MOVLB  00
0A7F:  BSF    70.5
....................     
.................... #if defined (AL115v10) 
....................    output_bit(LED_Y, y_ok); 
....................    output_bit(LED_R, r_ok); 
....................    output_bit(LED_B, b_ok);    
.................... #else  
....................     output_bit(LED_Y, !y_ok); 
0A80:  BTFSS  70.4
0A81:  GOTO   284
0A82:  BCF    19.1
0A83:  GOTO   285
0A84:  BSF    19.1
0A85:  BCF    13.1
....................    output_bit(LED_R, !r_ok); 
0A86:  BTFSS  70.3
0A87:  GOTO   28A
0A88:  BCF    19.2
0A89:  GOTO   28B
0A8A:  BSF    19.2
0A8B:  BCF    13.2
....................    output_bit(LED_B, !b_ok);     
0A8C:  BTFSS  70.5
0A8D:  GOTO   290
0A8E:  BCF    19.0
0A8F:  GOTO   291
0A90:  BSF    19.0
0A91:  BCF    13.0
.................... #endif 
....................     
....................     
....................   if((r_ok == 1) && (y_ok == 1) && (b_ok == 1)) 
0A92:  BTFSS  70.3
0A93:  GOTO   29A
0A94:  BTFSS  70.4
0A95:  GOTO   29A
0A96:  BTFSS  70.5
0A97:  GOTO   29A
....................    mains_ok =1; 
0A98:  BSF    70.2
0A99:  GOTO   29B
....................   else  
....................    mains_ok = 0; 
0A9A:  BCF    70.2
....................     
....................    find_adj_volt(); 
0A9B:  CALL   000
....................    output_bit(RL_MAINS, !mains_ok ); 
0A9C:  BTFSS  70.2
0A9D:  GOTO   2A0
0A9E:  BCF    1A.2
0A9F:  GOTO   2A1
0AA0:  BSF    1A.2
0AA1:  MOVLW  1B
0AA2:  MOVWF  14
.................... //////////////////dg voltage ///////////////////// 
....................  
....................    DG_SELECT(); 
0AA3:  MOVLW  14
0AA4:  MOVWF  78
0AA5:  MOVLB  01
0AA6:  MOVF   1D,W
0AA7:  ANDLW  03
0AA8:  IORWF  78,W
0AA9:  MOVWF  1D
....................    delay_ms(1); 
0AAA:  MOVLW  01
0AAB:  MOVWF  61
0AAC:  MOVLP  00
0AAD:  MOVLB  00
0AAE:  CALL   460
0AAF:  MOVLP  08
....................    dg_volt=phasecheck()*dgrvoltratio; 
0AB0:  MOVLP  00
0AB1:  CALL   490
0AB2:  MOVLP  08
0AB3:  MOVF   79,W
0AB4:  MOVLB  01
0AB5:  MOVWF  59
0AB6:  MOVF   78,W
0AB7:  MOVWF  58
0AB8:  MOVF   59,W
0AB9:  MOVWF  69
0ABA:  MOVF   58,W
0ABB:  MOVWF  68
0ABC:  MOVLP  00
0ABD:  MOVLB  00
0ABE:  CALL   20E
0ABF:  MOVLP  08
0AC0:  MOVF   7A,W
0AC1:  MOVLB  01
0AC2:  MOVWF  67
0AC3:  MOVF   79,W
0AC4:  MOVWF  66
0AC5:  MOVF   78,W
0AC6:  MOVWF  65
0AC7:  MOVF   77,W
0AC8:  MOVWF  64
0AC9:  MOVF   3D,W
0ACA:  MOVWF  6B
0ACB:  MOVF   3C,W
0ACC:  MOVWF  6A
0ACD:  MOVF   3B,W
0ACE:  MOVWF  69
0ACF:  MOVF   3A,W
0AD0:  MOVWF  68
0AD1:  MOVLP  00
0AD2:  MOVLB  00
0AD3:  CALL   4EC
0AD4:  MOVLP  08
0AD5:  MOVF   7A,W
0AD6:  MOVLB  01
0AD7:  MOVWF  63
0AD8:  MOVF   79,W
0AD9:  MOVWF  62
0ADA:  MOVF   78,W
0ADB:  MOVWF  61
0ADC:  MOVF   77,W
0ADD:  MOVWF  60
0ADE:  MOVLP  00
0ADF:  MOVLB  00
0AE0:  CALL   6CF
0AE1:  MOVLP  08
0AE2:  MOVF   79,W
0AE3:  MOVWF  6F
0AE4:  MOVF   78,W
0AE5:  MOVWF  6E
....................    output_bit(RL_DG, (dg_volt>120));  
0AE6:  MOVF   6F,F
0AE7:  BTFSS  03.2
0AE8:  GOTO   2EF
0AE9:  MOVF   6E,W
0AEA:  SUBLW  78
0AEB:  BTFSS  03.0
0AEC:  GOTO   2EF
0AED:  BCF    1A.7
0AEE:  GOTO   2F0
0AEF:  BSF    1A.7
0AF0:  MOVLW  1B
0AF1:  MOVWF  14
....................  
....................     
.................... /////////////////////////////BTS battery voltage monitoring///////////////////// 
.................... ////////////////bts battery adjustment 
....................  
....................     
....................    BATT_SELECT(); 
0AF2:  MOVLW  00
0AF3:  MOVWF  78
0AF4:  MOVLB  01
0AF5:  MOVF   1D,W
0AF6:  ANDLW  03
0AF7:  IORWF  78,W
0AF8:  MOVWF  1D
....................  
....................    delay_ms(1); 
0AF9:  MOVLW  01
0AFA:  MOVWF  61
0AFB:  MOVLP  00
0AFC:  MOVLB  00
0AFD:  CALL   460
0AFE:  MOVLP  08
....................    bat_volt_lu = phasecheck3()*btsbatvoltratio; 
0AFF:  MOVLP  00
0B00:  CALL   725
0B01:  MOVLP  08
0B02:  MOVF   79,W
0B03:  MOVLB  01
0B04:  MOVWF  59
0B05:  MOVF   78,W
0B06:  MOVWF  58
0B07:  MOVF   59,W
0B08:  MOVWF  69
0B09:  MOVF   58,W
0B0A:  MOVWF  68
0B0B:  MOVLP  00
0B0C:  MOVLB  00
0B0D:  CALL   20E
0B0E:  MOVLP  08
0B0F:  MOVF   7A,W
0B10:  MOVLB  01
0B11:  MOVWF  67
0B12:  MOVF   79,W
0B13:  MOVWF  66
0B14:  MOVF   78,W
0B15:  MOVWF  65
0B16:  MOVF   77,W
0B17:  MOVWF  64
0B18:  MOVF   43,W
0B19:  MOVWF  6B
0B1A:  MOVF   42,W
0B1B:  MOVWF  6A
0B1C:  MOVF   41,W
0B1D:  MOVWF  69
0B1E:  MOVF   40,W
0B1F:  MOVWF  68
0B20:  MOVLP  00
0B21:  MOVLB  00
0B22:  CALL   4EC
0B23:  MOVLP  08
0B24:  MOVF   7A,W
0B25:  MOVLB  01
0B26:  MOVWF  63
0B27:  MOVF   79,W
0B28:  MOVWF  62
0B29:  MOVF   78,W
0B2A:  MOVWF  61
0B2B:  MOVF   77,W
0B2C:  MOVWF  60
0B2D:  MOVLP  00
0B2E:  MOVLB  00
0B2F:  CALL   6CF
0B30:  MOVLP  08
0B31:  MOVF   79,W
0B32:  MOVWF  67
0B33:  MOVF   78,W
0B34:  MOVWF  66
....................    bat_row_an = read_adc(); 
0B35:  MOVLB  01
0B36:  BSF    1D.1
0B37:  BTFSC  1D.1
0B38:  GOTO   337
0B39:  MOVF   1B,W
0B3A:  MOVWF  54
0B3B:  MOVF   1C,W
0B3C:  MOVWF  55
....................    if(bat_low_already_detected) 
0B3D:  BTFSS  70.1
0B3E:  GOTO   357
....................    { 
....................       if(bat_volt_lu<(bat_adj_reading+50)) 
0B3F:  MOVLW  32
0B40:  ADDWF  22,W
0B41:  MOVWF  78
0B42:  MOVLW  00
0B43:  ADDWFC 23,W
0B44:  MOVWF  7A
0B45:  MOVF   78,W
0B46:  MOVLB  00
0B47:  MOVF   67,W
0B48:  SUBWF  7A,W
0B49:  BTFSS  03.0
0B4A:  GOTO   353
0B4B:  BTFSS  03.2
0B4C:  GOTO   351
0B4D:  MOVF   78,W
0B4E:  SUBWF  66,W
0B4F:  BTFSC  03.0
0B50:  GOTO   353
....................       { 
....................          lowbat=1; 
0B51:  BSF    70.0
....................              
....................       } 
0B52:  GOTO   355
....................       else  
....................       {    
....................          lowbat=0; 
0B53:  BCF    70.0
....................          bat_low_already_detected=0; 
0B54:  BCF    70.1
....................       } 
....................    } 
0B55:  GOTO   36D
0B56:  MOVLB  01
....................    else 
....................    { 
....................       if(bat_volt_lu<(bat_adj_reading)) 
0B57:  MOVLB  00
0B58:  MOVF   67,W
0B59:  MOVLB  01
0B5A:  SUBWF  23,W
0B5B:  BTFSS  03.0
0B5C:  GOTO   36A
0B5D:  BTFSS  03.2
0B5E:  GOTO   367
0B5F:  MOVF   22,W
0B60:  MOVLB  00
0B61:  SUBWF  66,W
0B62:  BTFSS  03.0
0B63:  GOTO   366
0B64:  MOVLB  01
0B65:  GOTO   36A
0B66:  MOVLB  01
....................       { 
....................          lowbat=1; 
0B67:  BSF    70.0
....................          bat_low_already_detected=1; 
0B68:  BSF    70.1
....................       } 
0B69:  GOTO   36C
....................       else 
....................       { 
....................          lowbat=0; 
0B6A:  BCF    70.0
....................          bat_low_already_detected=0;       
0B6B:  BCF    70.1
0B6C:  MOVLB  00
....................       } 
....................    }  
....................     
....................    output_bit(RL_BATT, !lowbat);      output_bit(LED_BATT, lowbat); 
0B6D:  BTFSS  70.0
0B6E:  GOTO   371
0B6F:  BCF    1A.6
0B70:  GOTO   372
0B71:  BSF    1A.6
0B72:  MOVLW  1B
0B73:  MOVWF  14
0B74:  BTFSC  70.0
0B75:  GOTO   378
0B76:  BCF    1A.5
0B77:  GOTO   379
0B78:  BSF    1A.5
0B79:  MOVLW  1B
0B7A:  MOVWF  14
....................    
....................    print_readings(); 
0B7B:  GOTO   0F5
0B7C:  MOVLP  08
0B7D:  GOTO   6C9 (RETURN)
.................... } 
....................  
....................  
.................... void print_readings(void) 
.................... { 
....................     
....................    /////////// 1 and 2 for mains knob reading 
....................    i2c_buffer[1] = (uint8_t)(phase_adjusted_volt&0x00ff); 
*
08F5:  MOVLB  01
08F6:  CLRF   7A
08F7:  MOVF   24,W
08F8:  MOVLB  00
08F9:  MOVWF  25
....................    i2c_buffer[2] = (uint8_t)(phase_adjusted_volt>>8);    
08FA:  MOVLB  01
08FB:  MOVF   25,W
08FC:  CLRF   7A
08FD:  MOVLB  00
08FE:  MOVWF  26
....................     
....................    /////////// 3 and 4 bts battery knob reading 
....................    i2c_buffer[3] = (uint8_t)(bat_adj_reading&0x00ff); 
08FF:  MOVLB  01
0900:  CLRF   7A
0901:  MOVF   22,W
0902:  MOVLB  00
0903:  MOVWF  27
....................    i2c_buffer[4] = (uint8_t)((bat_adj_reading>>8)&0x00ff); 
0904:  MOVLB  01
0905:  MOVF   23,W
0906:  MOVWF  58
0907:  CLRF   59
0908:  CLRF   7A
0909:  MOVF   58,W
090A:  MOVLB  00
090B:  MOVWF  28
....................     
....................    /////////// 5 and 6 dg battery knob reading 
....................    i2c_buffer[5] = 0;   //(uint8_t)(dgbat_adj_reading&0x00ff); 
090C:  CLRF   29
....................    i2c_buffer[6] = 0;   //(uint8_t)((dgbat_adj_reading>>8)&0x00ff);    
090D:  CLRF   2A
....................     
....................    /////////// 7 and 8 temperature knob reading 
....................    i2c_buffer[7] = 0;   //(uint8_t)(temp_adj_reading&0x00ff); 
090E:  CLRF   2B
....................    i2c_buffer[8] = 0;   //(uint8_t)((temp_adj_reading>>8)&0x00ff);    
090F:  CLRF   2C
....................     
....................    /////////// 9 and 10 bts battery reading 
....................    i2c_buffer[9] = (uint8_t)(bat_volt_lu&0x00ff); 
0910:  CLRF   7A
0911:  MOVF   66,W
0912:  MOVWF  2D
....................    i2c_buffer[10] = (uint8_t)((bat_volt_lu>>8)&0x00ff);    
0913:  MOVF   67,W
0914:  MOVLB  01
0915:  MOVWF  58
0916:  CLRF   59
0917:  CLRF   7A
0918:  MOVF   58,W
0919:  MOVLB  00
091A:  MOVWF  2E
....................  
....................    /////////// 11 and 12 dg battery reading 
....................    i2c_buffer[11] = 0;   //(uint8_t)(dgbat_volt_lu&0x00ff); 
091B:  CLRF   2F
....................    i2c_buffer[12] = 0;   //(uint8_t)((dgbat_volt_lu>>8)&0x00ff);    
091C:  CLRF   30
....................     
....................    /////////// 13 and 14 temperature reading 
....................    i2c_buffer[13] = 0;   //(uint8_t)(temperature&0x00ff); 
091D:  CLRF   31
....................    i2c_buffer[14] = 0;   //(uint8_t)((temperature>>8)&0x00ff);    
091E:  CLRF   32
....................     
....................    /////////// 15 and 16 mains R reading 
....................    i2c_buffer[15] = (uint8_t)(r_phase_volt&0x00ff); 
091F:  CLRF   7A
0920:  MOVF   68,W
0921:  MOVWF  33
....................    i2c_buffer[16] = (uint8_t)((r_phase_volt>>8)&0x00ff);    
0922:  MOVF   69,W
0923:  MOVLB  01
0924:  MOVWF  58
0925:  CLRF   59
0926:  CLRF   7A
0927:  MOVF   58,W
0928:  MOVLB  00
0929:  MOVWF  34
....................     
....................    /////////// 17 and 18 Mains Y reading 
....................    i2c_buffer[17] = (uint8_t)(y_phase_volt&0x00ff); 
092A:  CLRF   7A
092B:  MOVF   6A,W
092C:  MOVWF  35
....................    i2c_buffer[18] = (uint8_t)((y_phase_volt>>8)&0x00ff); 
092D:  MOVF   6B,W
092E:  MOVLB  01
092F:  MOVWF  58
0930:  CLRF   59
0931:  CLRF   7A
0932:  MOVF   58,W
0933:  MOVLB  00
0934:  MOVWF  36
....................  
....................    /////////// 19 and 20 Mains B reading 
....................    i2c_buffer[19] = (uint8_t)(b_phase_volt&0x00ff); 
0935:  CLRF   7A
0936:  MOVF   6C,W
0937:  MOVWF  37
....................    i2c_buffer[20] = (uint8_t)((b_phase_volt>>8)&0x00ff); 
0938:  MOVF   6D,W
0939:  MOVLB  01
093A:  MOVWF  58
093B:  CLRF   59
093C:  CLRF   7A
093D:  MOVF   58,W
093E:  MOVLB  00
093F:  MOVWF  38
....................     
....................    /////////// 20 and 21 DG Phase reading 
....................    i2c_buffer[21] = (uint8_t)(dg_volt&0x00ff); 
0940:  CLRF   7A
0941:  MOVF   6E,W
0942:  MOVWF  39
....................    i2c_buffer[22] = (uint8_t)((dg_volt>>8)&0x00ff);    
0943:  MOVF   6F,W
0944:  MOVLB  01
0945:  MOVWF  58
0946:  CLRF   59
0947:  CLRF   7A
0948:  MOVF   58,W
0949:  MOVLB  00
094A:  MOVWF  3A
094B:  MOVLP  08
094C:  GOTO   37C (RETURN)
....................     
....................  
.................... } 
....................  
....................  
.................... #include "functions.c" 
.................... #separate 
.................... void init_settings(void) 
.................... { 
....................    read_rom_values(); 
*
0327:  CALL   1BB
....................    rvoltratio=((float)calibvolt)/((float)rcalibvoltreading); 
0328:  MOVLB  01
0329:  MOVF   3F,W
032A:  MOVWF  69
032B:  MOVF   3E,W
032C:  MOVWF  68
032D:  MOVLB  00
032E:  CALL   20E
032F:  MOVF   7A,W
0330:  MOVLB  01
0331:  MOVWF  5F
0332:  MOVF   79,W
0333:  MOVWF  5E
0334:  MOVF   78,W
0335:  MOVWF  5D
0336:  MOVF   77,W
0337:  MOVWF  5C
0338:  MOVF   27,W
0339:  MOVWF  69
033A:  MOVF   26,W
033B:  MOVWF  68
033C:  MOVLB  00
033D:  CALL   20E
033E:  MOVLB  01
033F:  MOVF   5F,W
0340:  MOVWF  6B
0341:  MOVF   5E,W
0342:  MOVWF  6A
0343:  MOVF   5D,W
0344:  MOVWF  69
0345:  MOVF   5C,W
0346:  MOVWF  68
0347:  MOVF   7A,W
0348:  MOVWF  6F
0349:  MOVF   79,W
034A:  MOVWF  6E
034B:  MOVF   78,W
034C:  MOVWF  6D
034D:  MOVF   77,W
034E:  MOVWF  6C
034F:  MOVLB  00
0350:  CALL   22D
0351:  MOVF   7A,W
0352:  MOVLB  01
0353:  MOVWF  31
0354:  MOVF   79,W
0355:  MOVWF  30
0356:  MOVF   78,W
0357:  MOVWF  2F
0358:  MOVF   77,W
0359:  MOVWF  2E
....................    yvoltratio=((float)calibvolt)/((float)ycalibvoltreading); 
035A:  MOVF   3F,W
035B:  MOVWF  69
035C:  MOVF   3E,W
035D:  MOVWF  68
035E:  MOVLB  00
035F:  CALL   20E
0360:  MOVF   7A,W
0361:  MOVLB  01
0362:  MOVWF  5F
0363:  MOVF   79,W
0364:  MOVWF  5E
0365:  MOVF   78,W
0366:  MOVWF  5D
0367:  MOVF   77,W
0368:  MOVWF  5C
0369:  MOVF   29,W
036A:  MOVWF  69
036B:  MOVF   28,W
036C:  MOVWF  68
036D:  MOVLB  00
036E:  CALL   20E
036F:  MOVLB  01
0370:  MOVF   5F,W
0371:  MOVWF  6B
0372:  MOVF   5E,W
0373:  MOVWF  6A
0374:  MOVF   5D,W
0375:  MOVWF  69
0376:  MOVF   5C,W
0377:  MOVWF  68
0378:  MOVF   7A,W
0379:  MOVWF  6F
037A:  MOVF   79,W
037B:  MOVWF  6E
037C:  MOVF   78,W
037D:  MOVWF  6D
037E:  MOVF   77,W
037F:  MOVWF  6C
0380:  MOVLB  00
0381:  CALL   22D
0382:  MOVF   7A,W
0383:  MOVLB  01
0384:  MOVWF  35
0385:  MOVF   79,W
0386:  MOVWF  34
0387:  MOVF   78,W
0388:  MOVWF  33
0389:  MOVF   77,W
038A:  MOVWF  32
....................    bvoltratio=((float)calibvolt)/((float)bcalibvoltreading); 
038B:  MOVF   3F,W
038C:  MOVWF  69
038D:  MOVF   3E,W
038E:  MOVWF  68
038F:  MOVLB  00
0390:  CALL   20E
0391:  MOVF   7A,W
0392:  MOVLB  01
0393:  MOVWF  5F
0394:  MOVF   79,W
0395:  MOVWF  5E
0396:  MOVF   78,W
0397:  MOVWF  5D
0398:  MOVF   77,W
0399:  MOVWF  5C
039A:  MOVF   2B,W
039B:  MOVWF  69
039C:  MOVF   2A,W
039D:  MOVWF  68
039E:  MOVLB  00
039F:  CALL   20E
03A0:  MOVLB  01
03A1:  MOVF   5F,W
03A2:  MOVWF  6B
03A3:  MOVF   5E,W
03A4:  MOVWF  6A
03A5:  MOVF   5D,W
03A6:  MOVWF  69
03A7:  MOVF   5C,W
03A8:  MOVWF  68
03A9:  MOVF   7A,W
03AA:  MOVWF  6F
03AB:  MOVF   79,W
03AC:  MOVWF  6E
03AD:  MOVF   78,W
03AE:  MOVWF  6D
03AF:  MOVF   77,W
03B0:  MOVWF  6C
03B1:  MOVLB  00
03B2:  CALL   22D
03B3:  MOVF   7A,W
03B4:  MOVLB  01
03B5:  MOVWF  39
03B6:  MOVF   79,W
03B7:  MOVWF  38
03B8:  MOVF   78,W
03B9:  MOVWF  37
03BA:  MOVF   77,W
03BB:  MOVWF  36
....................    dgrvoltratio = ((float)calibvolt)/((float)dgrcalibvoltreading);    
03BC:  MOVF   3F,W
03BD:  MOVWF  69
03BE:  MOVF   3E,W
03BF:  MOVWF  68
03C0:  MOVLB  00
03C1:  CALL   20E
03C2:  MOVF   7A,W
03C3:  MOVLB  01
03C4:  MOVWF  5F
03C5:  MOVF   79,W
03C6:  MOVWF  5E
03C7:  MOVF   78,W
03C8:  MOVWF  5D
03C9:  MOVF   77,W
03CA:  MOVWF  5C
03CB:  MOVF   2D,W
03CC:  MOVWF  69
03CD:  MOVF   2C,W
03CE:  MOVWF  68
03CF:  MOVLB  00
03D0:  CALL   20E
03D1:  MOVLB  01
03D2:  MOVF   5F,W
03D3:  MOVWF  6B
03D4:  MOVF   5E,W
03D5:  MOVWF  6A
03D6:  MOVF   5D,W
03D7:  MOVWF  69
03D8:  MOVF   5C,W
03D9:  MOVWF  68
03DA:  MOVF   7A,W
03DB:  MOVWF  6F
03DC:  MOVF   79,W
03DD:  MOVWF  6E
03DE:  MOVF   78,W
03DF:  MOVWF  6D
03E0:  MOVF   77,W
03E1:  MOVWF  6C
03E2:  MOVLB  00
03E3:  CALL   22D
03E4:  MOVF   7A,W
03E5:  MOVLB  01
03E6:  MOVWF  3D
03E7:  MOVF   79,W
03E8:  MOVWF  3C
03E9:  MOVF   78,W
03EA:  MOVWF  3B
03EB:  MOVF   77,W
03EC:  MOVWF  3A
....................     
....................    btsbatvoltratio=((float)btsbatcalibvolt)/((float)btsbatcalibvoltreading); 
03ED:  MOVF   47,W
03EE:  MOVWF  69
03EF:  MOVF   46,W
03F0:  MOVWF  68
03F1:  MOVLB  00
03F2:  CALL   20E
03F3:  MOVF   7A,W
03F4:  MOVLB  01
03F5:  MOVWF  5F
03F6:  MOVF   79,W
03F7:  MOVWF  5E
03F8:  MOVF   78,W
03F9:  MOVWF  5D
03FA:  MOVF   77,W
03FB:  MOVWF  5C
03FC:  MOVF   45,W
03FD:  MOVWF  69
03FE:  MOVF   44,W
03FF:  MOVWF  68
0400:  MOVLB  00
0401:  CALL   20E
0402:  MOVLB  01
0403:  MOVF   5F,W
0404:  MOVWF  6B
0405:  MOVF   5E,W
0406:  MOVWF  6A
0407:  MOVF   5D,W
0408:  MOVWF  69
0409:  MOVF   5C,W
040A:  MOVWF  68
040B:  MOVF   7A,W
040C:  MOVWF  6F
040D:  MOVF   79,W
040E:  MOVWF  6E
040F:  MOVF   78,W
0410:  MOVWF  6D
0411:  MOVF   77,W
0412:  MOVWF  6C
0413:  MOVLB  00
0414:  CALL   22D
0415:  MOVF   7A,W
0416:  MOVLB  01
0417:  MOVWF  43
0418:  MOVF   79,W
0419:  MOVWF  42
041A:  MOVF   78,W
041B:  MOVWF  41
041C:  MOVF   77,W
041D:  MOVWF  40
....................     
....................    v_adj_ratio = 60.0/((float)v_range_high); 
041E:  MOVF   51,W
041F:  MOVWF  69
0420:  MOVF   50,W
0421:  MOVWF  68
0422:  MOVLB  00
0423:  CALL   20E
0424:  MOVLB  01
0425:  CLRF   6B
0426:  CLRF   6A
0427:  MOVLW  70
0428:  MOVWF  69
0429:  MOVLW  84
042A:  MOVWF  68
042B:  MOVF   7A,W
042C:  MOVWF  6F
042D:  MOVF   79,W
042E:  MOVWF  6E
042F:  MOVF   78,W
0430:  MOVWF  6D
0431:  MOVF   77,W
0432:  MOVWF  6C
0433:  MOVLB  00
0434:  CALL   22D
0435:  MOVF   7A,W
0436:  MOVLB  01
0437:  MOVWF  4B
0438:  MOVF   79,W
0439:  MOVWF  4A
043A:  MOVF   78,W
043B:  MOVWF  49
043C:  MOVF   77,W
043D:  MOVWF  48
....................    b_adj_ratio = 60.0/((float)b_range_high); 
043E:  MOVF   53,W
043F:  MOVWF  69
0440:  MOVF   52,W
0441:  MOVWF  68
0442:  MOVLB  00
0443:  CALL   20E
0444:  MOVLB  01
0445:  CLRF   6B
0446:  CLRF   6A
0447:  MOVLW  70
0448:  MOVWF  69
0449:  MOVLW  84
044A:  MOVWF  68
044B:  MOVF   7A,W
044C:  MOVWF  6F
044D:  MOVF   79,W
044E:  MOVWF  6E
044F:  MOVF   78,W
0450:  MOVWF  6D
0451:  MOVF   77,W
0452:  MOVWF  6C
0453:  MOVLB  00
0454:  CALL   22D
0455:  MOVF   7A,W
0456:  MOVLB  01
0457:  MOVWF  4F
0458:  MOVF   79,W
0459:  MOVWF  4E
045A:  MOVF   78,W
045B:  MOVWF  4D
045C:  MOVF   77,W
045D:  MOVWF  4C
045E:  MOVLB  00
045F:  RETURN
....................  
....................            
.................... } 
....................  
....................  
.................... void get_ac_readings() 
.................... { 
....................    MAINS_R_SELECT(); 
....................    rcalibvoltreading=phasecheck(); 
....................     
....................    MAINS_Y_SELECT(); 
....................    ycalibvoltreading=phasecheck(); 
....................     
....................    MAINS_B_SELECT(); 
....................    bcalibvoltreading=phasecheck(); 
....................     
....................    DG_SELECT(); 
....................    dgrcalibvoltreading=phasecheck(); 
.................... } 
....................  
....................  
.................... #separate 
.................... uint16_t CalculatePhaseValue(uint16_t phase_reading, uint16_t input_value) 
.................... { 
....................    phase_reading = (uint16_t)((float)(phase_reading)*((float)(calibvolt)/(float)(input_value))); 
*
0B7E:  MOVLB  01
0B7F:  MOVF   5D,W
0B80:  MOVWF  69
0B81:  MOVF   5C,W
0B82:  MOVWF  68
0B83:  MOVLP  00
0B84:  MOVLB  00
0B85:  CALL   20E
0B86:  MOVLP  08
0B87:  MOVF   7A,W
0B88:  MOVLB  01
0B89:  MOVWF  63
0B8A:  MOVF   79,W
0B8B:  MOVWF  62
0B8C:  MOVF   78,W
0B8D:  MOVWF  61
0B8E:  MOVF   77,W
0B8F:  MOVWF  60
0B90:  MOVF   3F,W
0B91:  MOVWF  69
0B92:  MOVF   3E,W
0B93:  MOVWF  68
0B94:  MOVLP  00
0B95:  MOVLB  00
0B96:  CALL   20E
0B97:  MOVLP  08
0B98:  MOVF   7A,W
0B99:  MOVLB  01
0B9A:  MOVWF  67
0B9B:  MOVF   79,W
0B9C:  MOVWF  66
0B9D:  MOVF   78,W
0B9E:  MOVWF  65
0B9F:  MOVF   77,W
0BA0:  MOVWF  64
0BA1:  MOVF   5F,W
0BA2:  MOVWF  69
0BA3:  MOVF   5E,W
0BA4:  MOVWF  68
0BA5:  MOVLP  00
0BA6:  MOVLB  00
0BA7:  CALL   20E
0BA8:  MOVLP  08
0BA9:  MOVLB  01
0BAA:  MOVF   67,W
0BAB:  MOVWF  6B
0BAC:  MOVF   66,W
0BAD:  MOVWF  6A
0BAE:  MOVF   65,W
0BAF:  MOVWF  69
0BB0:  MOVF   64,W
0BB1:  MOVWF  68
0BB2:  MOVF   7A,W
0BB3:  MOVWF  6F
0BB4:  MOVF   79,W
0BB5:  MOVWF  6E
0BB6:  MOVF   78,W
0BB7:  MOVWF  6D
0BB8:  MOVF   77,W
0BB9:  MOVWF  6C
0BBA:  MOVLP  00
0BBB:  MOVLB  00
0BBC:  CALL   22D
0BBD:  MOVLP  08
0BBE:  MOVLB  01
0BBF:  MOVF   63,W
0BC0:  MOVWF  67
0BC1:  MOVF   62,W
0BC2:  MOVWF  66
0BC3:  MOVF   61,W
0BC4:  MOVWF  65
0BC5:  MOVF   60,W
0BC6:  MOVWF  64
0BC7:  MOVF   7A,W
0BC8:  MOVWF  6B
0BC9:  MOVF   79,W
0BCA:  MOVWF  6A
0BCB:  MOVF   78,W
0BCC:  MOVWF  69
0BCD:  MOVF   77,W
0BCE:  MOVWF  68
0BCF:  MOVLP  00
0BD0:  MOVLB  00
0BD1:  CALL   4EC
0BD2:  MOVLP  08
0BD3:  MOVF   7A,W
0BD4:  MOVLB  01
0BD5:  MOVWF  63
0BD6:  MOVF   79,W
0BD7:  MOVWF  62
0BD8:  MOVF   78,W
0BD9:  MOVWF  61
0BDA:  MOVF   77,W
0BDB:  MOVWF  60
0BDC:  MOVLP  00
0BDD:  MOVLB  00
0BDE:  CALL   6CF
0BDF:  MOVLP  08
0BE0:  MOVF   79,W
0BE1:  MOVLB  01
0BE2:  MOVWF  5D
0BE3:  MOVF   78,W
0BE4:  MOVWF  5C
....................    return(phase_reading); 
0BE5:  MOVF   5C,W
0BE6:  MOVWF  78
0BE7:  MOVF   5D,W
0BE8:  MOVWF  79
0BE9:  MOVLB  00
0BEA:  RETURN
.................... } 
....................  
.................... void ProcessMasterData(void) 
.................... { 
....................  
....................    uint16_t temp_value, temp_value2; 
....................     
.................... //////////////////////// Mains R calibration      //////////////////////////////// 
....................  
....................    if((i2c_buffer[23] != 0) || (i2c_buffer[24] != 0))   {        //mains r calibration 
0BEB:  MOVF   3B,F
0BEC:  BTFSS  03.2
0BED:  GOTO   3F1
0BEE:  MOVF   3C,F
0BEF:  BTFSC  03.2
0BF0:  GOTO   423
....................     
....................       temp_value = make16(i2c_buffer[24], i2c_buffer[23]) ; 
0BF1:  MOVF   3C,W
0BF2:  MOVLB  01
0BF3:  MOVWF  59
0BF4:  MOVLB  00
0BF5:  MOVF   3B,W
0BF6:  MOVLB  01
0BF7:  MOVWF  58
....................        
....................       MAINS_R_SELECT(); 
0BF8:  MOVLW  0C
0BF9:  MOVWF  78
0BFA:  MOVF   1D,W
0BFB:  ANDLW  03
0BFC:  IORWF  78,W
0BFD:  MOVWF  1D
....................       rcalibvoltreading=phasecheck(); 
0BFE:  MOVLP  00
0BFF:  MOVLB  00
0C00:  CALL   490
0C01:  MOVLP  08
0C02:  MOVF   79,W
0C03:  MOVLB  01
0C04:  MOVWF  27
0C05:  MOVF   78,W
0C06:  MOVWF  26
....................       rcalibvoltreading = CalculatePhaseValue(rcalibvoltreading, temp_value); 
0C07:  MOVF   27,W
0C08:  MOVWF  5D
0C09:  MOVF   26,W
0C0A:  MOVWF  5C
0C0B:  MOVF   59,W
0C0C:  MOVWF  5F
0C0D:  MOVF   58,W
0C0E:  MOVWF  5E
0C0F:  MOVLB  00
0C10:  CALL   37E
0C11:  MOVF   79,W
0C12:  MOVLB  01
0C13:  MOVWF  27
0C14:  MOVF   78,W
0C15:  MOVWF  26
....................       write_int16_alarmrom(2, rcalibvoltreading); 
0C16:  CLRF   5F
0C17:  MOVLW  02
0C18:  MOVWF  5E
0C19:  MOVF   27,W
0C1A:  MOVWF  61
0C1B:  MOVF   26,W
0C1C:  MOVWF  60
0C1D:  MOVLP  00
0C1E:  MOVLB  00
0C1F:  CALL   0D9
0C20:  MOVLP  08
....................       i2c_buffer[23] = 0;   i2c_buffer[24] = 0; 
0C21:  CLRF   3B
0C22:  CLRF   3C
....................        
....................    } else {} 
....................     
.................... //////////////////////// Mains Y calibration      //////////////////////////////// 
....................  
....................    if((i2c_buffer[26] != 0) || (i2c_buffer[25] != 0))   {        //mains y calibration 
0C23:  MOVF   3E,F
0C24:  BTFSS  03.2
0C25:  GOTO   429
0C26:  MOVF   3D,F
0C27:  BTFSC  03.2
0C28:  GOTO   45B
....................     
....................       temp_value = make16(i2c_buffer[26], i2c_buffer[25]) ; 
0C29:  MOVF   3E,W
0C2A:  MOVLB  01
0C2B:  MOVWF  59
0C2C:  MOVLB  00
0C2D:  MOVF   3D,W
0C2E:  MOVLB  01
0C2F:  MOVWF  58
....................        
....................       MAINS_Y_SELECT(); 
0C30:  MOVLW  04
0C31:  MOVWF  78
0C32:  MOVF   1D,W
0C33:  ANDLW  03
0C34:  IORWF  78,W
0C35:  MOVWF  1D
....................       ycalibvoltreading=phasecheck(); 
0C36:  MOVLP  00
0C37:  MOVLB  00
0C38:  CALL   490
0C39:  MOVLP  08
0C3A:  MOVF   79,W
0C3B:  MOVLB  01
0C3C:  MOVWF  29
0C3D:  MOVF   78,W
0C3E:  MOVWF  28
....................       ycalibvoltreading = CalculatePhaseValue(ycalibvoltreading, temp_value); 
0C3F:  MOVF   29,W
0C40:  MOVWF  5D
0C41:  MOVF   28,W
0C42:  MOVWF  5C
0C43:  MOVF   59,W
0C44:  MOVWF  5F
0C45:  MOVF   58,W
0C46:  MOVWF  5E
0C47:  MOVLB  00
0C48:  CALL   37E
0C49:  MOVF   79,W
0C4A:  MOVLB  01
0C4B:  MOVWF  29
0C4C:  MOVF   78,W
0C4D:  MOVWF  28
....................       write_int16_alarmrom(4, ycalibvoltreading); 
0C4E:  CLRF   5F
0C4F:  MOVLW  04
0C50:  MOVWF  5E
0C51:  MOVF   29,W
0C52:  MOVWF  61
0C53:  MOVF   28,W
0C54:  MOVWF  60
0C55:  MOVLP  00
0C56:  MOVLB  00
0C57:  CALL   0D9
0C58:  MOVLP  08
....................       i2c_buffer[26] = 0;   i2c_buffer[25] = 0; 
0C59:  CLRF   3E
0C5A:  CLRF   3D
....................        
....................    } else {} 
....................     
.................... //////////////////////// Mains B calibration      //////////////////////////////// 
....................  
....................    if((i2c_buffer[28] != 0) || (i2c_buffer[27] != 0))   {        //mains b calibration 
0C5B:  MOVF   40,F
0C5C:  BTFSS  03.2
0C5D:  GOTO   461
0C5E:  MOVF   3F,F
0C5F:  BTFSC  03.2
0C60:  GOTO   493
....................     
....................       temp_value = make16(i2c_buffer[28], i2c_buffer[27]) ; 
0C61:  MOVF   40,W
0C62:  MOVLB  01
0C63:  MOVWF  59
0C64:  MOVLB  00
0C65:  MOVF   3F,W
0C66:  MOVLB  01
0C67:  MOVWF  58
....................        
....................       MAINS_B_SELECT(); 
0C68:  MOVLW  08
0C69:  MOVWF  78
0C6A:  MOVF   1D,W
0C6B:  ANDLW  03
0C6C:  IORWF  78,W
0C6D:  MOVWF  1D
....................       bcalibvoltreading=phasecheck(); 
0C6E:  MOVLP  00
0C6F:  MOVLB  00
0C70:  CALL   490
0C71:  MOVLP  08
0C72:  MOVF   79,W
0C73:  MOVLB  01
0C74:  MOVWF  2B
0C75:  MOVF   78,W
0C76:  MOVWF  2A
....................       bcalibvoltreading = CalculatePhaseValue(bcalibvoltreading, temp_value); 
0C77:  MOVF   2B,W
0C78:  MOVWF  5D
0C79:  MOVF   2A,W
0C7A:  MOVWF  5C
0C7B:  MOVF   59,W
0C7C:  MOVWF  5F
0C7D:  MOVF   58,W
0C7E:  MOVWF  5E
0C7F:  MOVLB  00
0C80:  CALL   37E
0C81:  MOVF   79,W
0C82:  MOVLB  01
0C83:  MOVWF  2B
0C84:  MOVF   78,W
0C85:  MOVWF  2A
....................       write_int16_alarmrom(6, bcalibvoltreading); 
0C86:  CLRF   5F
0C87:  MOVLW  06
0C88:  MOVWF  5E
0C89:  MOVF   2B,W
0C8A:  MOVWF  61
0C8B:  MOVF   2A,W
0C8C:  MOVWF  60
0C8D:  MOVLP  00
0C8E:  MOVLB  00
0C8F:  CALL   0D9
0C90:  MOVLP  08
....................       i2c_buffer[28] = 0;   i2c_buffer[27] = 0; 
0C91:  CLRF   40
0C92:  CLRF   3F
....................        
....................    } else {}    
....................     
.................... /////////////////////////// DGR calibration      //////////////////////////////// 
....................  
....................    if((i2c_buffer[29] != 0) || (i2c_buffer[30] != 0))   {        //dgr calibration 
0C93:  MOVF   41,F
0C94:  BTFSS  03.2
0C95:  GOTO   499
0C96:  MOVF   42,F
0C97:  BTFSC  03.2
0C98:  GOTO   4CB
....................     
....................       temp_value = make16(i2c_buffer[30], i2c_buffer[29]) ; 
0C99:  MOVF   42,W
0C9A:  MOVLB  01
0C9B:  MOVWF  59
0C9C:  MOVLB  00
0C9D:  MOVF   41,W
0C9E:  MOVLB  01
0C9F:  MOVWF  58
....................        
....................       DG_SELECT(); 
0CA0:  MOVLW  14
0CA1:  MOVWF  78
0CA2:  MOVF   1D,W
0CA3:  ANDLW  03
0CA4:  IORWF  78,W
0CA5:  MOVWF  1D
....................       dgrcalibvoltreading=phasecheck(); 
0CA6:  MOVLP  00
0CA7:  MOVLB  00
0CA8:  CALL   490
0CA9:  MOVLP  08
0CAA:  MOVF   79,W
0CAB:  MOVLB  01
0CAC:  MOVWF  2D
0CAD:  MOVF   78,W
0CAE:  MOVWF  2C
....................       dgrcalibvoltreading = CalculatePhaseValue(dgrcalibvoltreading, temp_value); 
0CAF:  MOVF   2D,W
0CB0:  MOVWF  5D
0CB1:  MOVF   2C,W
0CB2:  MOVWF  5C
0CB3:  MOVF   59,W
0CB4:  MOVWF  5F
0CB5:  MOVF   58,W
0CB6:  MOVWF  5E
0CB7:  MOVLB  00
0CB8:  CALL   37E
0CB9:  MOVF   79,W
0CBA:  MOVLB  01
0CBB:  MOVWF  2D
0CBC:  MOVF   78,W
0CBD:  MOVWF  2C
....................       write_int16_alarmrom(8, dgrcalibvoltreading); 
0CBE:  CLRF   5F
0CBF:  MOVLW  08
0CC0:  MOVWF  5E
0CC1:  MOVF   2D,W
0CC2:  MOVWF  61
0CC3:  MOVF   2C,W
0CC4:  MOVWF  60
0CC5:  MOVLP  00
0CC6:  MOVLB  00
0CC7:  CALL   0D9
0CC8:  MOVLP  08
....................       i2c_buffer[29] = 0;   i2c_buffer[30] = 0; 
0CC9:  CLRF   41
0CCA:  CLRF   42
....................        
....................    } else {}       
....................     
....................  
.................... ///////////////////////// bts battery calibraiton ////////////////////////////// 
....................     
....................    if((i2c_buffer[40] != 0) || (i2c_buffer[39] != 0))   {        //bts calibration   
0CCB:  MOVF   4C,F
0CCC:  BTFSS  03.2
0CCD:  GOTO   4D1
0CCE:  MOVF   4B,F
0CCF:  BTFSC  03.2
0CD0:  GOTO   534
....................     
....................       temp_value = make16(i2c_buffer[40], i2c_buffer[39]) ; 
0CD1:  MOVF   4C,W
0CD2:  MOVLB  01
0CD3:  MOVWF  59
0CD4:  MOVLB  00
0CD5:  MOVF   4B,W
0CD6:  MOVLB  01
0CD7:  MOVWF  58
....................        
....................       if((temp_value<1000)||(temp_value>9000)) 
0CD8:  MOVF   59,W
0CD9:  SUBLW  03
0CDA:  BTFSS  03.0
0CDB:  GOTO   4E2
0CDC:  BTFSS  03.2
0CDD:  GOTO   4ED
0CDE:  MOVF   58,W
0CDF:  SUBLW  E7
0CE0:  BTFSC  03.0
0CE1:  GOTO   4ED
0CE2:  MOVF   59,W
0CE3:  SUBLW  22
0CE4:  BTFSC  03.0
0CE5:  GOTO   4F1
0CE6:  XORLW  FF
0CE7:  BTFSS  03.2
0CE8:  GOTO   4ED
0CE9:  MOVF   58,W
0CEA:  SUBLW  28
0CEB:  BTFSC  03.0
0CEC:  GOTO   4F1
....................       { 
....................          i2c_buffer[64] = 1;         //bts battery calibration input value error 
0CED:  MOVLW  01
0CEE:  MOVLB  00
0CEF:  MOVWF  64
....................       }   else {} 
0CF0:  MOVLB  01
....................       BATT_SELECT(); 
0CF1:  MOVLW  00
0CF2:  MOVWF  78
0CF3:  MOVF   1D,W
0CF4:  ANDLW  03
0CF5:  IORWF  78,W
0CF6:  MOVWF  1D
....................       temp_value2=phasecheck3(); 
0CF7:  MOVLP  00
0CF8:  MOVLB  00
0CF9:  CALL   725
0CFA:  MOVLP  08
0CFB:  MOVF   79,W
0CFC:  MOVLB  01
0CFD:  MOVWF  5B
0CFE:  MOVF   78,W
0CFF:  MOVWF  5A
....................       if(temp_value2<50||temp_value>700) 
0D00:  MOVF   5B,F
0D01:  BTFSS  03.2
0D02:  GOTO   507
0D03:  MOVF   5A,W
0D04:  SUBLW  31
0D05:  BTFSC  03.0
0D06:  GOTO   512
0D07:  MOVF   59,W
0D08:  SUBLW  01
0D09:  BTFSC  03.0
0D0A:  GOTO   516
0D0B:  XORLW  FF
0D0C:  BTFSS  03.2
0D0D:  GOTO   512
0D0E:  MOVF   58,W
0D0F:  SUBLW  BC
0D10:  BTFSC  03.0
0D11:  GOTO   516
....................       { 
....................          i2c_buffer[64] = 2;         //bts battery calibration input voltage error 
0D12:  MOVLW  02
0D13:  MOVLB  00
0D14:  MOVWF  64
0D15:  MOVLB  01
....................       } 
....................  
....................       write_int16_alarmrom(12, temp_value); 
0D16:  CLRF   5F
0D17:  MOVLW  0C
0D18:  MOVWF  5E
0D19:  MOVF   59,W
0D1A:  MOVWF  61
0D1B:  MOVF   58,W
0D1C:  MOVWF  60
0D1D:  MOVLP  00
0D1E:  MOVLB  00
0D1F:  CALL   0D9
0D20:  MOVLP  08
....................       write_int16_alarmrom(14, temp_value2); 
0D21:  MOVLB  01
0D22:  CLRF   5F
0D23:  MOVLW  0E
0D24:  MOVWF  5E
0D25:  MOVF   5B,W
0D26:  MOVWF  61
0D27:  MOVF   5A,W
0D28:  MOVWF  60
0D29:  MOVLP  00
0D2A:  MOVLB  00
0D2B:  CALL   0D9
0D2C:  MOVLP  08
....................        
....................       i2c_buffer[63] = 1;            //bts battery calibration successful 
0D2D:  MOVLW  01
0D2E:  MOVWF  63
....................       read_rom_values();    
0D2F:  MOVLP  00
0D30:  CALL   1BB
0D31:  MOVLP  08
....................       i2c_buffer[40] = 0;i2c_buffer[39] = 0; 
0D32:  CLRF   4C
0D33:  CLRF   4B
....................        
....................    } else {} 
....................  
....................  
.................... ////////////////////////// knob mains uv calibration /////////////////////////// 
....................  
....................    if(i2c_buffer[32] == TRUE)   {  
0D34:  DECFSZ 44,W
0D35:  GOTO   555
....................     
....................           VOLT_ADJ_SELECT(); 
0D36:  MOVLW  34
0D37:  MOVWF  78
0D38:  MOVLB  01
0D39:  MOVF   1D,W
0D3A:  ANDLW  03
0D3B:  IORWF  78,W
0D3C:  MOVWF  1D
....................           write_int16_alarmrom(20, phasecheck());   //mains knob 
0D3D:  MOVLP  00
0D3E:  MOVLB  00
0D3F:  CALL   490
0D40:  MOVLP  08
0D41:  MOVF   79,W
0D42:  MOVLB  01
0D43:  MOVWF  5D
0D44:  MOVF   78,W
0D45:  MOVWF  5C
0D46:  CLRF   5F
0D47:  MOVLW  14
0D48:  MOVWF  5E
0D49:  MOVF   5D,W
0D4A:  MOVWF  61
0D4B:  MOVF   5C,W
0D4C:  MOVWF  60
0D4D:  MOVLP  00
0D4E:  MOVLB  00
0D4F:  CALL   0D9
0D50:  MOVLP  08
....................           i2c_buffer[32] = 0; 
0D51:  CLRF   44
....................           read_rom_values();  
0D52:  MOVLP  00
0D53:  CALL   1BB
0D54:  MOVLP  08
....................  
....................    } 
....................  
.................... ////////////////////////// knob bts battery calibration //////////////////////// 
....................  
....................    if(i2c_buffer[36] == TRUE)   {  
0D55:  DECFSZ 48,W
0D56:  GOTO   576
....................     
....................             BAT_ADJ_SELECT(); 
0D57:  MOVLW  30
0D58:  MOVWF  78
0D59:  MOVLB  01
0D5A:  MOVF   1D,W
0D5B:  ANDLW  03
0D5C:  IORWF  78,W
0D5D:  MOVWF  1D
....................             write_int16_alarmrom(22, phasecheck());   //bts knob 
0D5E:  MOVLP  00
0D5F:  MOVLB  00
0D60:  CALL   490
0D61:  MOVLP  08
0D62:  MOVF   79,W
0D63:  MOVLB  01
0D64:  MOVWF  5D
0D65:  MOVF   78,W
0D66:  MOVWF  5C
0D67:  CLRF   5F
0D68:  MOVLW  16
0D69:  MOVWF  5E
0D6A:  MOVF   5D,W
0D6B:  MOVWF  61
0D6C:  MOVF   5C,W
0D6D:  MOVWF  60
0D6E:  MOVLP  00
0D6F:  MOVLB  00
0D70:  CALL   0D9
0D71:  MOVLP  08
....................             i2c_buffer[36] = 0; 
0D72:  CLRF   48
....................             read_rom_values();  
0D73:  MOVLP  00
0D74:  CALL   1BB
0D75:  MOVLP  08
....................  
....................    } 
....................  
....................  
.................... ////////////////////////// All Knob decalibration  ///////////////////////////// 
....................  
....................    if(i2c_buffer[31] == TRUE)   {  
0D76:  DECFSZ 43,W
0D77:  GOTO   57F
....................  
....................             ResetRomKnob(); 
0D78:  MOVLP  00
0D79:  CALL   189
0D7A:  MOVLP  08
....................             i2c_buffer[31] = 0; 
0D7B:  CLRF   43
....................             read_rom_values();  
0D7C:  MOVLP  00
0D7D:  CALL   1BB
0D7E:  MOVLP  08
....................  
....................    }    
....................     
.................... /////////////////////// All Battery decalibration  ///////////////////////////// 
....................  
....................    if(i2c_buffer[58] == TRUE)   {  
0D7F:  DECFSZ 5E,W
0D80:  GOTO   588
....................  
....................             ResetRomBattery(); 
0D81:  MOVLP  00
0D82:  CALL   174
0D83:  MOVLP  08
....................             i2c_buffer[58] = 0; 
0D84:  CLRF   5E
....................             read_rom_values();  
0D85:  MOVLP  00
0D86:  CALL   1BB
0D87:  MOVLP  08
....................  
....................    }    
....................  
.................... /////////////////////// All Phases decalibration  ///////////////////////////// 
....................  
....................    if(i2c_buffer[57] == TRUE)   {  
0D88:  DECFSZ 5D,W
0D89:  GOTO   591
....................  
....................             ResetRomPhase(); 
0D8A:  MOVLP  00
0D8B:  CALL   146
0D8C:  MOVLP  08
....................             i2c_buffer[57] = 0; 
0D8D:  CLRF   5D
....................             read_rom_values();  
0D8E:  MOVLP  00
0D8F:  CALL   1BB
0D90:  MOVLP  08
....................  
....................    } 
....................  
.................... //////////////////////////////////////////////////////////////////////////////// 
....................    //read_rom_values(); 
....................    init_settings(); 
0D91:  MOVLP  00
0D92:  CALL   327
0D93:  MOVLP  08
....................    i2c_buffer[62] = 0; 
0D94:  CLRF   62
0D95:  MOVLP  08
0D96:  GOTO   6DF (RETURN)
....................     
.................... } 
....................  
....................  
....................  
.................... #include "int.c" 
....................  
....................  
.................... #int_TIMER2 
.................... void  TIMER2_isr(void)  
.................... { 
.................... //output_high(LED_BATT); 
.................... 	return; 
.................... } 
....................  
*
0050:  MOVLB  0E
0051:  BCF    10.1
0052:  MOVLB  00
0053:  MOVLP  00
0054:  MOVLB  00
0055:  GOTO   03F
.................... #int_TIMER0 
.................... 	void  TIMER0_isr(void)  
.................... { 
.................... //output_high(LED_BATT); 
.................... return; 
.................... } 
....................  
0056:  MOVLB  0E
0057:  BCF    0C.5
0058:  MOVLB  00
0059:  MOVLP  00
005A:  MOVLB  00
005B:  GOTO   03F
.................... #int_OSC_FAIL 
.................... void  OSC_FAIL_isr(void)  
.................... { 
.................... 	#ASM 
005C:  RESET
.................... 	RESET; 
.................... 	#ENDASM 
.................... } 
....................  
....................  
....................  
....................  
....................  
....................  
.................... #include "i2c_display.c" 
.................... #include <stdint.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... ////                           stdint.h                                //// 
.................... ////                                                                   //// 
.................... //// Standard integer definitions.                                     //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
005D:  MOVLB  0E
005E:  BCF    0D.7
005F:  MOVLB  00
0060:  MOVLP  00
0061:  MOVLB  00
0062:  GOTO   03F
.................... #ifndef _STDINT 
....................  
.................... #define _STDINT 
....................  
.................... //////////// exact width 
....................  
.................... typedef signed int8 int8_t; 
.................... typedef unsigned int8 uint8_t; 
.................... typedef signed int16 int16_t; 
.................... typedef unsigned int16 uint16_t; 
.................... typedef signed int32 int32_t; 
.................... typedef unsigned int32 uint32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int24_t; 
.................... //typedef unsigned int24 uint24_t; 
.................... typedef signed int64 int64_t; 
.................... typedef unsigned int64 uint64_t; 
.................... #endif 
....................  
.................... #define INT8_MAX  (127) 
.................... #define INT8_MIN  (-128) 
.................... #define UINT8_MAX (255) 
....................  
.................... #define INT16_MAX  (32767) 
.................... #define INT16_MIN  (-32768) 
.................... #define UINT16_MAX (65535) 
....................  
.................... #define INT32_MAX  (2147483647) 
.................... #define INT32_MIN  (-2147483648) 
.................... #define UINT32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT24_MAX  (8388607) 
.................... //#define INT24_MIN  (-8388608) 
.................... //#define UINT24_MAX (16777215) 
....................  
.................... #define INT64_MAX  (9223372036854775807) 
.................... #define INT64_MIN  (-9223372036854775808) 
.................... #define UINT64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// minimum width 
....................  
.................... typedef signed int8 int_least8_t; 
.................... typedef unsigned int8 uint_least8_t; 
.................... typedef signed int16 int_least16_t; 
.................... typedef unsigned int16 uint_least16_t; 
.................... typedef signed int32 int_least32_t; 
.................... typedef unsigned int32 uint_least32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int_least24_t; 
.................... //typedef unsigned int24 uint_least24_t; 
.................... typedef signed int64 int_least64_t; 
.................... typedef unsigned int64 uint_least64_t; 
.................... #endif 
....................  
.................... #define INT_LEAST8_MAX  (127) 
.................... #define INT_LEAST8_MIN  (-128) 
.................... #define UINT_LEAST8_MAX (255) 
....................  
.................... #define INT_LEAST16_MAX  (32767) 
.................... #define INT_LEAST16_MIN  (-32768) 
.................... #define UINT_LEAST16_MAX (65535) 
....................  
.................... #define INT_LEAST32_MAX  (2147483647) 
.................... #define INT_LEAST32_MIN  (-2147483648) 
.................... #define UINT_LEAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_LEAST24_MAX  (8388607) 
.................... //#define INT_LEAST24_MIN  (-8388608) 
.................... //#define UINT_LEAST24_MAX (16777215) 
....................  
.................... #define INT_LEAST64_MAX  (9223372036854775807) 
.................... #define INT_LEAST64_MIN  (-9223372036854775808) 
.................... #define UINT_LEAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// fastest width 
....................  
.................... #if defined(__PCD__) 
.................... typedef signed int16 int_fast8_t; 
.................... typedef unsigned int16 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (32767) 
.................... #define INT_FAST8_MIN  (-32768) 
.................... #define UINT_FAST8_MAX (65535) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... //typedef signed int24 int_fast24_t; 
.................... //typedef unsigned int24 uint_fast24_t; 
.................... typedef signed int64 int_fast64_t; 
.................... typedef unsigned int64 uint_fast64_t; 
.................... #else 
.................... typedef signed int8 int_fast8_t; 
.................... typedef unsigned int8 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (127) 
.................... #define INT_FAST8_MIN  (-128) 
.................... #define UINT_FAST8_MAX (255) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... #endif 
....................  
.................... typedef signed int32 int_fast32_t; 
.................... typedef unsigned int32 uint_fast32_t; 
....................  
.................... #define INT_FAST16_MAX  (32767) 
.................... #define INT_FAST16_MIN  (-32768) 
.................... #define UINT_FAST16_MAX (65535) 
....................  
.................... #define INT_FAST32_MAX  (2147483647) 
.................... #define INT_FAST32_MIN  (-2147483648) 
.................... #define UINT_FAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_FAST24_MAX  (8388607) 
.................... //#define INT_FAST24_MIN  (-8388608) 
.................... //#define UINT_FAST24_MAX (16777215) 
....................  
.................... #define INT_FAST64_MAX  (9223372036854775807) 
.................... #define INT_FAST64_MIN  (-9223372036854775808) 
.................... #define UINT_FAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... //////////// big enough to hold pointers (OPTIONAL) 
....................  
.................... #if defined(__PCD__) 
....................    typedef unsigned int32 uintptr_t; 
....................    typedef signed int32 intptr_t; 
.................... #else 
....................    typedef unsigned int16 uintptr_t; 
....................    typedef signed int16 intptr_t; 
.................... #endif 
....................  
.................... /// TODO: 
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
....................  
....................  
.................... /////////// greatest width (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intmax_t uintmax_t 
....................  
.................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
....................  
.................... /// INTMAX_C(value) UINTMAX_C(value) 
....................  
....................  
.................... #endif 
....................  
....................  
.................... BYTE address; 
....................  
.................... #INT_SSP 
.................... void ssp_interrupt () 
.................... { 
....................    BYTE incoming, state; 
....................     
....................    state = i2c_isr_state(); 
0063:  MOVLB  03
0064:  BTFSC  0F.5
0065:  GOTO   069
0066:  CLRF   72
0067:  BTFSC  0F.2
0068:  BSF    72.7
0069:  MOVF   72,W
006A:  INCF   72,F
006B:  MOVLB  02
006C:  MOVWF  31
....................     
....................    if(state <= 0x80)	                  //Master is sending data 
006D:  MOVF   31,W
006E:  SUBLW  80
006F:  BTFSS  03.0
0070:  GOTO   099
....................    { 
....................       if(state == 0x80) 
0071:  MOVF   31,W
0072:  SUBLW  80
0073:  BTFSS  03.2
0074:  GOTO   07A
....................          incoming =i2c_read(2);           //Passing 2 as parameter, causes the function to read the SSPBUF without releasing the clock 
0075:  MOVLB  03
0076:  MOVF   0C,W
0077:  MOVLB  02
0078:  MOVWF  30
0079:  GOTO   082
....................       else 
....................          incoming = i2c_read(); 
007A:  MOVLB  03
007B:  BCF    10.6
007C:  BTFSS  0F.0
007D:  GOTO   07C
007E:  MOVF   0C,W
007F:  BSF    10.4
0080:  MOVLB  02
0081:  MOVWF  30
....................        
....................       if(state == 1)                      //First received byte is address 
0082:  DECFSZ 31,W
0083:  GOTO   087
....................          address = incoming; 
0084:  MOVF   30,W
0085:  MOVWF  71
0086:  GOTO   099
....................       else if(state >=2 && state !=0x80)  //Received byte is data 
0087:  MOVF   31,W
0088:  SUBLW  01
0089:  BTFSC  03.0
008A:  GOTO   099
008B:  MOVF   31,W
008C:  SUBLW  80
008D:  BTFSC  03.2
008E:  GOTO   099
....................          i2c_buffer[address++] = incoming; 
008F:  MOVF   71,W
0090:  INCF   71,F
0091:  ADDLW  04
0092:  MOVWF  04
0093:  MOVLW  20
0094:  MOVWF  05
0095:  BTFSC  03.0
0096:  INCF   05,F
0097:  MOVF   30,W
0098:  MOVWF  00
....................    } 
....................     
....................    if(state >= 0x80)                      //Master is requesting data 
0099:  MOVF   31,W
009A:  SUBLW  7F
009B:  BTFSC  03.0
009C:  GOTO   0B9
....................    { 
....................       i2c_write(i2c_buffer[address++]); 
009D:  MOVF   71,W
009E:  INCF   71,F
009F:  ADDLW  04
00A0:  MOVWF  04
00A1:  MOVLW  20
00A2:  MOVWF  05
00A3:  BTFSC  03.0
00A4:  INCF   05,F
00A5:  MOVF   00,W
00A6:  MOVWF  32
00A7:  MOVF   32,W
00A8:  MOVWF  33
....................    } 
....................  
.................... } 
....................  
....................  
....................  
....................  
....................  
....................  
.................... #if defined (AL115v20) && defined (AL115v10) 
....................    #error Multiple version definitions 
.................... #elif defined (AL115v20) 
....................    #undef AL115v10 
*
00B9:  MOVLB  0E
00BA:  BCF    0F.0
00BB:  MOVLB  00
00BC:  MOVLP  00
00BD:  MOVLB  00
00BE:  GOTO   03F
.................... #elif defined (AL115v10) 
....................    #undef AL115v20 
.................... #else 
....................    #error Version Error. 
.................... #endif 
....................  
....................  
.................... void main() 
*
0D97:  MOVLW  55
0D98:  MOVLB  3D
0D99:  MOVWF  0F
0D9A:  MOVLW  AA
0D9B:  MOVWF  0F
0D9C:  BCF    0F.0
0D9D:  MOVLW  13
0D9E:  MOVWF  45
0D9F:  MOVLW  14
0DA0:  MOVWF  46
0DA1:  MOVLW  15
0DA2:  MOVLB  3E
0DA3:  MOVWF  23
0DA4:  MOVLW  16
0DA5:  MOVWF  24
0DA6:  MOVLW  55
0DA7:  MOVLB  3D
0DA8:  MOVWF  0F
0DA9:  MOVLW  AA
0DAA:  MOVWF  0F
0DAB:  BSF    0F.0
0DAC:  MOVLB  11
0DAD:  CLRF   12
0DAE:  CLRF   0F
0DAF:  CLRF   11
0DB0:  MOVLW  02
0DB1:  MOVWF  13
0DB2:  MOVLW  60
0DB3:  MOVWF  0D
0DB4:  MOVLB  00
0DB5:  BSF    14.3
0DB6:  BSF    14.4
0DB7:  MOVLB  03
0DB8:  BCF    12.0
0DB9:  BCF    12.1
0DBA:  BCF    12.3
0DBB:  MOVLW  A0
0DBC:  MOVWF  0D
0DBD:  MOVLW  FF
0DBE:  MOVWF  0E
0DBF:  MOVLW  36
0DC0:  MOVWF  10
0DC1:  BSF    11.0
0DC2:  BSF    11.7
0DC3:  MOVLB  00
0DC4:  CLRF   67
0DC5:  CLRF   66
0DC6:  CLRF   69
0DC7:  CLRF   68
0DC8:  CLRF   6B
0DC9:  CLRF   6A
0DCA:  CLRF   6D
0DCB:  CLRF   6C
0DCC:  CLRF   6F
0DCD:  CLRF   6E
0DCE:  MOVLB  01
0DCF:  CLRF   21
0DD0:  CLRF   20
0DD1:  CLRF   23
0DD2:  MOVLW  D1
0DD3:  MOVWF  22
0DD4:  BCF    70.0
0DD5:  BCF    70.1
0DD6:  BSF    70.2
0DD7:  BCF    70.3
0DD8:  BCF    70.4
0DD9:  BCF    70.5
0DDA:  CLRF   27
0DDB:  MOVLW  DC
0DDC:  MOVWF  26
0DDD:  CLRF   29
0DDE:  MOVWF  28
0DDF:  CLRF   2B
0DE0:  MOVWF  2A
0DE1:  CLRF   2D
0DE2:  MOVWF  2C
0DE3:  MOVLW  AE
0DE4:  MOVWF  31
0DE5:  MOVLW  47
0DE6:  MOVWF  30
0DE7:  MOVLW  01
0DE8:  MOVWF  2F
0DE9:  MOVLW  7F
0DEA:  MOVWF  2E
0DEB:  MOVLW  AE
0DEC:  MOVWF  35
0DED:  MOVLW  47
0DEE:  MOVWF  34
0DEF:  MOVLW  01
0DF0:  MOVWF  33
0DF1:  MOVLW  7F
0DF2:  MOVWF  32
0DF3:  MOVLW  AE
0DF4:  MOVWF  39
0DF5:  MOVLW  47
0DF6:  MOVWF  38
0DF7:  MOVLW  01
0DF8:  MOVWF  37
0DF9:  MOVLW  7F
0DFA:  MOVWF  36
0DFB:  MOVLW  AE
0DFC:  MOVWF  3D
0DFD:  MOVLW  47
0DFE:  MOVWF  3C
0DFF:  MOVLW  01
0E00:  MOVWF  3B
0E01:  MOVLW  7F
0E02:  MOVWF  3A
0E03:  CLRF   3F
0E04:  MOVLW  DC
0E05:  MOVWF  3E
0E06:  MOVLW  33
0E07:  MOVWF  43
0E08:  MOVWF  42
0E09:  MOVLW  1B
0E0A:  MOVWF  41
0E0B:  MOVLW  82
0E0C:  MOVWF  40
0E0D:  MOVLW  01
0E0E:  MOVWF  45
0E0F:  MOVLW  B9
0E10:  MOVWF  44
0E11:  MOVLW  12
0E12:  MOVWF  47
0E13:  MOVLW  C0
0E14:  MOVWF  46
0E15:  MOVLW  C9
0E16:  MOVWF  4B
0E17:  MOVLW  76
0E18:  MOVWF  4A
0E19:  MOVLW  3E
0E1A:  MOVWF  49
0E1B:  MOVLW  7B
0E1C:  MOVWF  48
0E1D:  MOVLW  C9
0E1E:  MOVWF  4F
0E1F:  MOVLW  76
0E20:  MOVWF  4E
0E21:  MOVLW  3E
0E22:  MOVWF  4D
0E23:  MOVLW  7C
0E24:  MOVWF  4C
0E25:  CLRF   51
0E26:  CLRF   50
0E27:  CLRF   53
0E28:  CLRF   52
0E29:  MOVLW  03
0E2A:  MOVWF  72
0E2B:  MOVLB  3E
0E2C:  CLRF   38
0E2D:  CLRF   43
0E2E:  CLRF   4E
0E2F:  MOVLB  13
0E30:  CLRF   11
0E31:  CLRF   12
0E32:  CLRF   13
0E33:  CLRF   10
0E34:  CLRF   15
0E35:  CLRF   16
0E36:  CLRF   17
0E37:  CLRF   14
.................... { 
....................    uint8_t temp_var; 
.................... //   setup_oscillator(OSC_4MHZ); 
....................  
....................    setup_adc_ports(sAN0|sAN1|sAN2|sAN3|sAN5|sAN12|sAN13); 
0E38:  MOVLB  01
0E39:  BCF    1E.0
0E3A:  BCF    1E.1
0E3B:  MOVLW  2F
0E3C:  MOVLB  3E
0E3D:  MOVWF  38
0E3E:  MOVLW  30
0E3F:  MOVWF  43
0E40:  MOVLW  00
0E41:  MOVWF  4E
....................    setup_adc(ADC_CLOCK_INTERNAL); 
0E42:  MOVLB  01
0E43:  BSF    1E.4
0E44:  BSF    1E.5
0E45:  BCF    1E.6
0E46:  BSF    1E.7
0E47:  BSF    1D.0
.................... //   setup_adc_reference(VREF_ADC_4v096); 
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_8);      //524 ms overflow 
0E48:  MOVLW  01
0E49:  MOVLB  04
0E4A:  MOVWF  11
0E4B:  MOVLW  37
0E4C:  MOVWF  0E
0E4D:  CLRF   0F
0E4E:  CLRF   10
....................  //  setup_wdt(WDT_64S); 
....................    setup_wdt(WDT_OFF); 
0E4F:  MOVLB  10
0E50:  BCF    0C.0
.................... //!   setup_timer_2(T2_DIV_BY_16,255,16);      //4.0 ms overflow, 65.5 ms interrupt 
.................... //! 
.................... //! 
.................... //!   enable_interrupts(INT_TIMER0); 
.................... //!   enable_interrupts(INT_TIMER1); 
.................... //!   enable_interrupts(INT_TIMER2); 
.................... disable_interrupts(PERIPH); 
0E51:  BCF    0B.6
.................... //enable_interrupts(INT_RTCC); 
.................... disable_interrupts(INT_RB); 
0E52:  MOVLB  0E
0E53:  BCF    16.4
0E54:  MOVLB  3E
0E55:  CLRF   3D
0E56:  CLRF   3E
.................... disable_interrupts(INT_EXT_L2H); 
0E57:  MOVLB  0E
0E58:  BCF    16.0
.................... disable_interrupts(INT_EXT_H2L); 
0E59:  BCF    16.0
.................... disable_interrupts(INT_EXT); 
0E5A:  BCF    16.0
.................... disable_interrupts(INT_AD); 
0E5B:  BCF    17.0
.................... disable_interrupts(INT_TBE); 
0E5C:  BCF    19.4
.................... disable_interrupts(INT_RDA); 
0E5D:  BCF    19.5
.................... disable_interrupts(INT_TIMER1); 
0E5E:  BCF    1A.0
.................... disable_interrupts(INT_TIMER2); 
0E5F:  BCF    1A.1
.................... disable_interrupts(INT_CCP1); 
0E60:  BCF    1C.0
.................... disable_interrupts(INT_CCP2); 
0E61:  BCF    1C.1
.................... disable_interrupts(INT_SSP); 
0E62:  BCF    19.0
.................... disable_interrupts(INT_BUSCOL); 
0E63:  BCF    19.1
.................... //disable_interrupts(INT_EEPROM); 
.................... disable_interrupts(INT_TIMER0); 
0E64:  BCF    16.5
.................... enable_interrupts(INT_OSC_FAIL); 
0E65:  BSF    17.7
.................... //disable_interrupts(INT_COMP); 
.................... //disable_interrupts(INT_COMP2); 
.................... //disable_interrupts(INT_ULPWU); 
.................... disable_interrupts(INT_RB0); 
0E66:  BCF    16.4
0E67:  MOVLB  3E
0E68:  BCF    48.0
0E69:  BCF    49.0
.................... disable_interrupts(INT_RB1); 
0E6A:  MOVLB  0E
0E6B:  BCF    16.4
0E6C:  MOVLB  3E
0E6D:  BCF    48.1
0E6E:  BCF    49.1
.................... disable_interrupts(INT_RB2); 
0E6F:  MOVLB  0E
0E70:  BCF    16.4
0E71:  MOVLB  3E
0E72:  BCF    48.2
0E73:  BCF    49.2
.................... disable_interrupts(INT_RB3); 
0E74:  MOVLB  0E
0E75:  BCF    16.4
0E76:  MOVLB  3E
0E77:  BCF    48.3
0E78:  BCF    49.3
.................... disable_interrupts(INT_RB4); 
0E79:  MOVLB  0E
0E7A:  BCF    16.4
0E7B:  MOVLB  3E
0E7C:  BCF    48.4
0E7D:  BCF    49.4
.................... disable_interrupts(INT_RB5); 
0E7E:  MOVLB  0E
0E7F:  BCF    16.4
0E80:  MOVLB  3E
0E81:  BCF    48.5
0E82:  BCF    49.5
.................... disable_interrupts(INT_RB6); 
0E83:  MOVLB  0E
0E84:  BCF    16.4
0E85:  MOVLB  3E
0E86:  BCF    48.6
0E87:  BCF    49.6
.................... disable_interrupts(INT_RB7); 
0E88:  MOVLB  0E
0E89:  BCF    16.4
0E8A:  MOVLB  3E
0E8B:  BCF    48.7
0E8C:  BCF    49.7
....................  
....................    enable_interrupts(INT_SSP);     
0E8D:  MOVLB  0E
0E8E:  BSF    19.0
....................    
....................    output_low(RL_MAINS); 
0E8F:  MOVLW  1B
0E90:  MOVLB  00
0E91:  MOVWF  14
0E92:  BCF    1A.2
....................    output_low(RL_DG); 
0E93:  MOVWF  14
0E94:  BCF    1A.7
....................    output_high(RL_BATT);   output_low(LED_BATT); 
0E95:  MOVWF  14
0E96:  BSF    1A.6
0E97:  MOVWF  14
0E98:  BCF    1A.5
....................     
....................    for(temp_var = 0; temp_var < 64; temp_var++){ 
0E99:  MOVLB  01
0E9A:  CLRF   56
0E9B:  MOVF   56,W
0E9C:  SUBLW  3F
0E9D:  BTFSS  03.0
0E9E:  GOTO   6A9
....................       i2c_buffer[temp_var] = 0; 
0E9F:  MOVLW  04
0EA0:  ADDWF  56,W
0EA1:  MOVWF  04
0EA2:  MOVLW  20
0EA3:  MOVWF  05
0EA4:  BTFSC  03.0
0EA5:  INCF   05,F
0EA6:  CLRF   00
0EA7:  INCF   56,F
0EA8:  GOTO   69B
....................    } 
....................  
....................  
....................    if(read_int16_alarmrom(0)!=0xAA) 
0EA9:  CLRF   5D
0EAA:  CLRF   5C
0EAB:  MOVLP  00
0EAC:  MOVLB  00
0EAD:  CALL   0BF
0EAE:  MOVLP  08
0EAF:  MOVF   79,W
0EB0:  MOVLB  01
0EB1:  MOVWF  59
0EB2:  MOVF   78,W
0EB3:  MOVWF  58
0EB4:  SUBLW  AA
0EB5:  BTFSS  03.2
0EB6:  GOTO   6BA
0EB7:  MOVF   59,F
0EB8:  BTFSC  03.2
0EB9:  GOTO   6BF
....................       reset_rom(); 
0EBA:  MOVLP  00
0EBB:  MOVLB  00
0EBC:  GOTO   1AE
0EBD:  MOVLP  08
0EBE:  MOVLB  01
....................    read_rom_values(); 
0EBF:  MOVLP  00
0EC0:  MOVLB  00
0EC1:  CALL   1BB
0EC2:  MOVLP  08
....................    init_settings(); 
0EC3:  MOVLP  00
0EC4:  CALL   327
0EC5:  MOVLP  08
....................  
....................     enable_interrupts(GLOBAL); 
0EC6:  MOVLW  C0
0EC7:  IORWF  0B,F
....................    while(TRUE) 
....................    { 
....................       checkconditions(); 
0EC8:  GOTO   14D
....................       enable_interrupts(INT_SSP); 
0EC9:  MOVLB  0E
0ECA:  BSF    19.0
....................       restart_wdt(); 
0ECB:  CLRWDT
....................       delay_ms(500); 
0ECC:  MOVLW  02
0ECD:  MOVLB  01
0ECE:  MOVWF  58
0ECF:  MOVLW  FA
0ED0:  MOVWF  61
0ED1:  MOVLP  00
0ED2:  MOVLB  00
0ED3:  CALL   460
0ED4:  MOVLP  08
0ED5:  MOVLB  01
0ED6:  DECFSZ 58,F
0ED7:  GOTO   6CF
....................       restart_wdt(); 
0ED8:  CLRWDT
....................       enable_interrupts(INT_SSP); 
0ED9:  MOVLB  0E
0EDA:  BSF    19.0
....................       if(i2c_buffer[62] == TRUE) 
0EDB:  MOVLB  00
0EDC:  DECFSZ 62,W
0EDD:  GOTO   6DF
....................       { 
....................          ProcessMasterData(); 
0EDE:  GOTO   3EB
....................       } 
0EDF:  GOTO   6C8
....................        
....................    } 
....................  
.................... } 
....................  
0EE0:  SLEEP

Configuration Fuses:
   Word  1: 3F8C   NOEXTOSC RSTOSC_HFINTRC NOCLKOUT CKS FCMEN
   Word  2: 3D7D   MCLR PUT NOLPBOR BROWNOUT_SW BORV27 ZCDDIS PPS1WAY STVREN NODEBUG
   Word  3: 3FFF   WDTSW WDT WDTWIN_SW WDTCLK_SW
   Word  4: 1FFF   BBSIZ512 NOBOOTBLOCK NOSAF NOWRT NOWRTB NOWRTC NOWRTSAF NOLVP
   Word  5: 3FFE   PROTECT
